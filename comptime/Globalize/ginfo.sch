;; ==========================================================
;; Class accessors
;; Bigloo (4.4a)
;; Inria -- Sophia Antipolis     Sun 20 Sep 2020 03:50:39 PM CEST 
;; (bigloo -classgen Globalize/ginfo.scm)
;; ==========================================================

;; The directives
(directives

;; sfun/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sfun/Ginfo::sfun/Ginfo arity1271::long side-effect1272::obj predicate-of1273::obj stack-allocator1274::obj top?1275::bool the-closure1276::obj effect1277::obj failsafe1278::obj args-noescape1279::obj property1280::obj args1281::obj args-name1282::obj body1283::obj class1284::obj dsssl-keywords1285::obj loc1286::obj optionals1287::obj keys1288::obj the-closure-global1289::obj strength1290::symbol stackable1291::obj G?1292::bool cfrom1293::obj cfrom*1294::obj cto1295::obj cto*1296::obj efunctions1297::obj integrator1298::obj imark1299::obj owner1300::obj integrated1301::obj plugged-in1302::obj mark1303::long free-mark1304::obj the-global1305::obj kaptured1306::obj new-body1307::obj bmark1308::long umark1309::long free1310::obj bound1311::obj)
    (inline sfun/Ginfo?::bool ::obj)
    (sfun/Ginfo-nil::sfun/Ginfo)
    (inline sfun/Ginfo-bound::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-bound-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-free::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-free-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-umark::long ::sfun/Ginfo)
    (inline sfun/Ginfo-umark-set! ::sfun/Ginfo ::long)
    (inline sfun/Ginfo-bmark::long ::sfun/Ginfo)
    (inline sfun/Ginfo-bmark-set! ::sfun/Ginfo ::long)
    (inline sfun/Ginfo-new-body::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-new-body-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-kaptured::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-kaptured-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-the-global::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-the-global-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-free-mark::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-free-mark-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-mark::long ::sfun/Ginfo)
    (inline sfun/Ginfo-mark-set! ::sfun/Ginfo ::long)
    (inline sfun/Ginfo-plugged-in::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-plugged-in-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-integrated::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-integrated-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-owner::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-owner-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-imark::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-imark-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-integrator::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-integrator-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-efunctions::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-efunctions-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-cto*::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-cto*-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-cto::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-cto-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-cfrom*::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-cfrom*-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-cfrom::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-cfrom-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-G?::bool ::sfun/Ginfo)
    (inline sfun/Ginfo-G?-set! ::sfun/Ginfo ::bool)
    (inline sfun/Ginfo-stackable::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-stackable-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-strength::symbol ::sfun/Ginfo)
    (inline sfun/Ginfo-strength-set! ::sfun/Ginfo ::symbol)
    (inline sfun/Ginfo-the-closure-global::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-the-closure-global-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-keys::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-optionals::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-loc::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-loc-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-dsssl-keywords::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-dsssl-keywords-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-class::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-class-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-body::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-body-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-args-name::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-args::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-args-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-property::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-property-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-args-noescape::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-args-noescape-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-failsafe::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-failsafe-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-effect::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-effect-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-the-closure::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-the-closure-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-top?::bool ::sfun/Ginfo)
    (inline sfun/Ginfo-top?-set! ::sfun/Ginfo ::bool)
    (inline sfun/Ginfo-stack-allocator::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-stack-allocator-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-predicate-of::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-predicate-of-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-side-effect::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-side-effect-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-arity::long ::sfun/Ginfo))))

;; svar/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-svar/Ginfo::svar/Ginfo loc1264::obj kaptured?1265::bool free-mark1266::long mark1267::long celled?1268::bool stackable1269::bool)
    (inline svar/Ginfo?::bool ::obj)
    (svar/Ginfo-nil::svar/Ginfo)
    (inline svar/Ginfo-stackable::bool ::svar/Ginfo)
    (inline svar/Ginfo-stackable-set! ::svar/Ginfo ::bool)
    (inline svar/Ginfo-celled?::bool ::svar/Ginfo)
    (inline svar/Ginfo-celled?-set! ::svar/Ginfo ::bool)
    (inline svar/Ginfo-mark::long ::svar/Ginfo)
    (inline svar/Ginfo-mark-set! ::svar/Ginfo ::long)
    (inline svar/Ginfo-free-mark::long ::svar/Ginfo)
    (inline svar/Ginfo-free-mark-set! ::svar/Ginfo ::long)
    (inline svar/Ginfo-kaptured?::bool ::svar/Ginfo)
    (inline svar/Ginfo-kaptured?-set! ::svar/Ginfo ::bool)
    (inline svar/Ginfo-loc::obj ::svar/Ginfo)
    (inline svar/Ginfo-loc-set! ::svar/Ginfo ::obj))))

;; sexit/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sexit/Ginfo::sexit/Ginfo handler1257::obj detached?1258::bool G?1259::bool kaptured?1260::bool free-mark1261::long mark1262::long)
    (inline sexit/Ginfo?::bool ::obj)
    (sexit/Ginfo-nil::sexit/Ginfo)
    (inline sexit/Ginfo-mark::long ::sexit/Ginfo)
    (inline sexit/Ginfo-mark-set! ::sexit/Ginfo ::long)
    (inline sexit/Ginfo-free-mark::long ::sexit/Ginfo)
    (inline sexit/Ginfo-free-mark-set! ::sexit/Ginfo ::long)
    (inline sexit/Ginfo-kaptured?::bool ::sexit/Ginfo)
    (inline sexit/Ginfo-kaptured?-set! ::sexit/Ginfo ::bool)
    (inline sexit/Ginfo-G?::bool ::sexit/Ginfo)
    (inline sexit/Ginfo-G?-set! ::sexit/Ginfo ::bool)
    (inline sexit/Ginfo-detached?::bool ::sexit/Ginfo)
    (inline sexit/Ginfo-detached?-set! ::sexit/Ginfo ::bool)
    (inline sexit/Ginfo-handler::obj ::sexit/Ginfo)
    (inline sexit/Ginfo-handler-set! ::sexit/Ginfo ::obj))))

;; local/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-local/Ginfo::local/Ginfo id1243::symbol name1244::obj type1245::type value1246::value access1247::obj fast-alpha1248::obj removable1249::obj occurrence1250::long occurrencew1251::long user?1252::bool key1253::long escape?1254::bool globalized?1255::bool)
    (inline local/Ginfo?::bool ::obj)
    (local/Ginfo-nil::local/Ginfo)
    (inline local/Ginfo-globalized?::bool ::local/Ginfo)
    (inline local/Ginfo-globalized?-set! ::local/Ginfo ::bool)
    (inline local/Ginfo-escape?::bool ::local/Ginfo)
    (inline local/Ginfo-escape?-set! ::local/Ginfo ::bool)
    (inline local/Ginfo-key::long ::local/Ginfo)
    (inline local/Ginfo-user?::bool ::local/Ginfo)
    (inline local/Ginfo-user?-set! ::local/Ginfo ::bool)
    (inline local/Ginfo-occurrencew::long ::local/Ginfo)
    (inline local/Ginfo-occurrencew-set! ::local/Ginfo ::long)
    (inline local/Ginfo-occurrence::long ::local/Ginfo)
    (inline local/Ginfo-occurrence-set! ::local/Ginfo ::long)
    (inline local/Ginfo-removable::obj ::local/Ginfo)
    (inline local/Ginfo-removable-set! ::local/Ginfo ::obj)
    (inline local/Ginfo-fast-alpha::obj ::local/Ginfo)
    (inline local/Ginfo-fast-alpha-set! ::local/Ginfo ::obj)
    (inline local/Ginfo-access::obj ::local/Ginfo)
    (inline local/Ginfo-access-set! ::local/Ginfo ::obj)
    (inline local/Ginfo-value::value ::local/Ginfo)
    (inline local/Ginfo-value-set! ::local/Ginfo ::value)
    (inline local/Ginfo-type::type ::local/Ginfo)
    (inline local/Ginfo-type-set! ::local/Ginfo ::type)
    (inline local/Ginfo-name::obj ::local/Ginfo)
    (inline local/Ginfo-name-set! ::local/Ginfo ::obj)
    (inline local/Ginfo-id::symbol ::local/Ginfo))))

;; global/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-global/Ginfo::global/Ginfo id1220::symbol name1221::obj type1222::type value1223::value access1224::obj fast-alpha1225::obj removable1226::obj occurrence1227::long occurrencew1228::long user?1229::bool module1230::symbol import1231::obj evaluable?1232::bool eval?1233::bool library1234::obj pragma1235::obj src1236::obj jvm-type-name1237::bstring init1238::obj alias1239::obj escape?1240::bool global-closure1241::obj)
    (inline global/Ginfo?::bool ::obj)
    (global/Ginfo-nil::global/Ginfo)
    (inline global/Ginfo-global-closure::obj ::global/Ginfo)
    (inline global/Ginfo-global-closure-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-escape?::bool ::global/Ginfo)
    (inline global/Ginfo-escape?-set! ::global/Ginfo ::bool)
    (inline global/Ginfo-alias::obj ::global/Ginfo)
    (inline global/Ginfo-alias-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-init::obj ::global/Ginfo)
    (inline global/Ginfo-init-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-jvm-type-name::bstring ::global/Ginfo)
    (inline global/Ginfo-jvm-type-name-set! ::global/Ginfo ::bstring)
    (inline global/Ginfo-src::obj ::global/Ginfo)
    (inline global/Ginfo-src-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-pragma::obj ::global/Ginfo)
    (inline global/Ginfo-pragma-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-library::obj ::global/Ginfo)
    (inline global/Ginfo-library-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-eval?::bool ::global/Ginfo)
    (inline global/Ginfo-eval?-set! ::global/Ginfo ::bool)
    (inline global/Ginfo-evaluable?::bool ::global/Ginfo)
    (inline global/Ginfo-evaluable?-set! ::global/Ginfo ::bool)
    (inline global/Ginfo-import::obj ::global/Ginfo)
    (inline global/Ginfo-import-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-module::symbol ::global/Ginfo)
    (inline global/Ginfo-module-set! ::global/Ginfo ::symbol)
    (inline global/Ginfo-user?::bool ::global/Ginfo)
    (inline global/Ginfo-user?-set! ::global/Ginfo ::bool)
    (inline global/Ginfo-occurrencew::long ::global/Ginfo)
    (inline global/Ginfo-occurrencew-set! ::global/Ginfo ::long)
    (inline global/Ginfo-occurrence::long ::global/Ginfo)
    (inline global/Ginfo-occurrence-set! ::global/Ginfo ::long)
    (inline global/Ginfo-removable::obj ::global/Ginfo)
    (inline global/Ginfo-removable-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-fast-alpha::obj ::global/Ginfo)
    (inline global/Ginfo-fast-alpha-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-access::obj ::global/Ginfo)
    (inline global/Ginfo-access-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-value::value ::global/Ginfo)
    (inline global/Ginfo-value-set! ::global/Ginfo ::value)
    (inline global/Ginfo-type::type ::global/Ginfo)
    (inline global/Ginfo-type-set! ::global/Ginfo ::type)
    (inline global/Ginfo-name::obj ::global/Ginfo)
    (inline global/Ginfo-name-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-id::symbol ::global/Ginfo)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; sfun/Ginfo
(define-inline (make-sfun/Ginfo::sfun/Ginfo arity1271::long side-effect1272::obj predicate-of1273::obj stack-allocator1274::obj top?1275::bool the-closure1276::obj effect1277::obj failsafe1278::obj args-noescape1279::obj property1280::obj args1281::obj args-name1282::obj body1283::obj class1284::obj dsssl-keywords1285::obj loc1286::obj optionals1287::obj keys1288::obj the-closure-global1289::obj strength1290::symbol stackable1291::obj G?1292::bool cfrom1293::obj cfrom*1294::obj cto1295::obj cto*1296::obj efunctions1297::obj integrator1298::obj imark1299::obj owner1300::obj integrated1301::obj plugged-in1302::obj mark1303::long free-mark1304::obj the-global1305::obj kaptured1306::obj new-body1307::obj bmark1308::long umark1309::long free1310::obj bound1311::obj) (instantiate::sfun/Ginfo (arity arity1271) (side-effect side-effect1272) (predicate-of predicate-of1273) (stack-allocator stack-allocator1274) (top? top?1275) (the-closure the-closure1276) (effect effect1277) (failsafe failsafe1278) (args-noescape args-noescape1279) (property property1280) (args args1281) (args-name args-name1282) (body body1283) (class class1284) (dsssl-keywords dsssl-keywords1285) (loc loc1286) (optionals optionals1287) (keys keys1288) (the-closure-global the-closure-global1289) (strength strength1290) (stackable stackable1291) (G? G?1292) (cfrom cfrom1293) (cfrom* cfrom*1294) (cto cto1295) (cto* cto*1296) (efunctions efunctions1297) (integrator integrator1298) (imark imark1299) (owner owner1300) (integrated integrated1301) (plugged-in plugged-in1302) (mark mark1303) (free-mark free-mark1304) (the-global the-global1305) (kaptured kaptured1306) (new-body new-body1307) (bmark bmark1308) (umark umark1309) (free free1310) (bound bound1311)))
(define-inline (sfun/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ sfun/Ginfo globalize_ginfo)))
(define (sfun/Ginfo-nil::sfun/Ginfo) (class-nil (@ sfun/Ginfo globalize_ginfo)))
(define-inline (sfun/Ginfo-bound::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o bound))
(define-inline (sfun/Ginfo-bound-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o bound) v))
(define-inline (sfun/Ginfo-free::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o free))
(define-inline (sfun/Ginfo-free-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o free) v))
(define-inline (sfun/Ginfo-umark::long o::sfun/Ginfo) (-> |#!bigloo_wallow| o umark))
(define-inline (sfun/Ginfo-umark-set! o::sfun/Ginfo v::long) (set! (-> |#!bigloo_wallow| o umark) v))
(define-inline (sfun/Ginfo-bmark::long o::sfun/Ginfo) (-> |#!bigloo_wallow| o bmark))
(define-inline (sfun/Ginfo-bmark-set! o::sfun/Ginfo v::long) (set! (-> |#!bigloo_wallow| o bmark) v))
(define-inline (sfun/Ginfo-new-body::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o new-body))
(define-inline (sfun/Ginfo-new-body-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o new-body) v))
(define-inline (sfun/Ginfo-kaptured::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o kaptured))
(define-inline (sfun/Ginfo-kaptured-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o kaptured) v))
(define-inline (sfun/Ginfo-the-global::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o the-global))
(define-inline (sfun/Ginfo-the-global-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o the-global) v))
(define-inline (sfun/Ginfo-free-mark::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o free-mark))
(define-inline (sfun/Ginfo-free-mark-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o free-mark) v))
(define-inline (sfun/Ginfo-mark::long o::sfun/Ginfo) (-> |#!bigloo_wallow| o mark))
(define-inline (sfun/Ginfo-mark-set! o::sfun/Ginfo v::long) (set! (-> |#!bigloo_wallow| o mark) v))
(define-inline (sfun/Ginfo-plugged-in::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o plugged-in))
(define-inline (sfun/Ginfo-plugged-in-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o plugged-in) v))
(define-inline (sfun/Ginfo-integrated::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o integrated))
(define-inline (sfun/Ginfo-integrated-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o integrated) v))
(define-inline (sfun/Ginfo-owner::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o owner))
(define-inline (sfun/Ginfo-owner-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o owner) v))
(define-inline (sfun/Ginfo-imark::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o imark))
(define-inline (sfun/Ginfo-imark-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o imark) v))
(define-inline (sfun/Ginfo-integrator::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o integrator))
(define-inline (sfun/Ginfo-integrator-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o integrator) v))
(define-inline (sfun/Ginfo-efunctions::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o efunctions))
(define-inline (sfun/Ginfo-efunctions-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o efunctions) v))
(define-inline (sfun/Ginfo-cto*::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o cto*))
(define-inline (sfun/Ginfo-cto*-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o cto*) v))
(define-inline (sfun/Ginfo-cto::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o cto))
(define-inline (sfun/Ginfo-cto-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o cto) v))
(define-inline (sfun/Ginfo-cfrom*::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o cfrom*))
(define-inline (sfun/Ginfo-cfrom*-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o cfrom*) v))
(define-inline (sfun/Ginfo-cfrom::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o cfrom))
(define-inline (sfun/Ginfo-cfrom-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o cfrom) v))
(define-inline (sfun/Ginfo-G?::bool o::sfun/Ginfo) (-> |#!bigloo_wallow| o G?))
(define-inline (sfun/Ginfo-G?-set! o::sfun/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o G?) v))
(define-inline (sfun/Ginfo-stackable::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o stackable))
(define-inline (sfun/Ginfo-stackable-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o stackable) v))
(define-inline (sfun/Ginfo-strength::symbol o::sfun/Ginfo) (-> |#!bigloo_wallow| o strength))
(define-inline (sfun/Ginfo-strength-set! o::sfun/Ginfo v::symbol) (set! (-> |#!bigloo_wallow| o strength) v))
(define-inline (sfun/Ginfo-the-closure-global::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o the-closure-global))
(define-inline (sfun/Ginfo-the-closure-global-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o the-closure-global) v))
(define-inline (sfun/Ginfo-keys::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o keys))
(define-inline (sfun/Ginfo-keys-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o keys) v))
(define-inline (sfun/Ginfo-optionals::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o optionals))
(define-inline (sfun/Ginfo-optionals-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o optionals) v))
(define-inline (sfun/Ginfo-loc::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o loc))
(define-inline (sfun/Ginfo-loc-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
(define-inline (sfun/Ginfo-dsssl-keywords::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o dsssl-keywords))
(define-inline (sfun/Ginfo-dsssl-keywords-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o dsssl-keywords) v))
(define-inline (sfun/Ginfo-class::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o class))
(define-inline (sfun/Ginfo-class-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (sfun/Ginfo-body::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o body))
(define-inline (sfun/Ginfo-body-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (sfun/Ginfo-args-name::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o args-name))
(define-inline (sfun/Ginfo-args-name-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o args-name) v))
(define-inline (sfun/Ginfo-args::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o args))
(define-inline (sfun/Ginfo-args-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (sfun/Ginfo-property::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o property))
(define-inline (sfun/Ginfo-property-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o property) v))
(define-inline (sfun/Ginfo-args-noescape::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o args-noescape))
(define-inline (sfun/Ginfo-args-noescape-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o args-noescape) v))
(define-inline (sfun/Ginfo-failsafe::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o failsafe))
(define-inline (sfun/Ginfo-failsafe-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o failsafe) v))
(define-inline (sfun/Ginfo-effect::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o effect))
(define-inline (sfun/Ginfo-effect-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (sfun/Ginfo-the-closure::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o the-closure))
(define-inline (sfun/Ginfo-the-closure-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o the-closure) v))
(define-inline (sfun/Ginfo-top?::bool o::sfun/Ginfo) (-> |#!bigloo_wallow| o top?))
(define-inline (sfun/Ginfo-top?-set! o::sfun/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (sfun/Ginfo-stack-allocator::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o stack-allocator))
(define-inline (sfun/Ginfo-stack-allocator-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o stack-allocator) v))
(define-inline (sfun/Ginfo-predicate-of::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o predicate-of))
(define-inline (sfun/Ginfo-predicate-of-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o predicate-of) v))
(define-inline (sfun/Ginfo-side-effect::obj o::sfun/Ginfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (sfun/Ginfo-side-effect-set! o::sfun/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (sfun/Ginfo-arity::long o::sfun/Ginfo) (-> |#!bigloo_wallow| o arity))
(define-inline (sfun/Ginfo-arity-set! o::sfun/Ginfo v::long) (set! (-> |#!bigloo_wallow| o arity) v))

;; svar/Ginfo
(define-inline (make-svar/Ginfo::svar/Ginfo loc1264::obj kaptured?1265::bool free-mark1266::long mark1267::long celled?1268::bool stackable1269::bool) (instantiate::svar/Ginfo (loc loc1264) (kaptured? kaptured?1265) (free-mark free-mark1266) (mark mark1267) (celled? celled?1268) (stackable stackable1269)))
(define-inline (svar/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ svar/Ginfo globalize_ginfo)))
(define (svar/Ginfo-nil::svar/Ginfo) (class-nil (@ svar/Ginfo globalize_ginfo)))
(define-inline (svar/Ginfo-stackable::bool o::svar/Ginfo) (-> |#!bigloo_wallow| o stackable))
(define-inline (svar/Ginfo-stackable-set! o::svar/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o stackable) v))
(define-inline (svar/Ginfo-celled?::bool o::svar/Ginfo) (-> |#!bigloo_wallow| o celled?))
(define-inline (svar/Ginfo-celled?-set! o::svar/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o celled?) v))
(define-inline (svar/Ginfo-mark::long o::svar/Ginfo) (-> |#!bigloo_wallow| o mark))
(define-inline (svar/Ginfo-mark-set! o::svar/Ginfo v::long) (set! (-> |#!bigloo_wallow| o mark) v))
(define-inline (svar/Ginfo-free-mark::long o::svar/Ginfo) (-> |#!bigloo_wallow| o free-mark))
(define-inline (svar/Ginfo-free-mark-set! o::svar/Ginfo v::long) (set! (-> |#!bigloo_wallow| o free-mark) v))
(define-inline (svar/Ginfo-kaptured?::bool o::svar/Ginfo) (-> |#!bigloo_wallow| o kaptured?))
(define-inline (svar/Ginfo-kaptured?-set! o::svar/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o kaptured?) v))
(define-inline (svar/Ginfo-loc::obj o::svar/Ginfo) (-> |#!bigloo_wallow| o loc))
(define-inline (svar/Ginfo-loc-set! o::svar/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sexit/Ginfo
(define-inline (make-sexit/Ginfo::sexit/Ginfo handler1257::obj detached?1258::bool G?1259::bool kaptured?1260::bool free-mark1261::long mark1262::long) (instantiate::sexit/Ginfo (handler handler1257) (detached? detached?1258) (G? G?1259) (kaptured? kaptured?1260) (free-mark free-mark1261) (mark mark1262)))
(define-inline (sexit/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ sexit/Ginfo globalize_ginfo)))
(define (sexit/Ginfo-nil::sexit/Ginfo) (class-nil (@ sexit/Ginfo globalize_ginfo)))
(define-inline (sexit/Ginfo-mark::long o::sexit/Ginfo) (-> |#!bigloo_wallow| o mark))
(define-inline (sexit/Ginfo-mark-set! o::sexit/Ginfo v::long) (set! (-> |#!bigloo_wallow| o mark) v))
(define-inline (sexit/Ginfo-free-mark::long o::sexit/Ginfo) (-> |#!bigloo_wallow| o free-mark))
(define-inline (sexit/Ginfo-free-mark-set! o::sexit/Ginfo v::long) (set! (-> |#!bigloo_wallow| o free-mark) v))
(define-inline (sexit/Ginfo-kaptured?::bool o::sexit/Ginfo) (-> |#!bigloo_wallow| o kaptured?))
(define-inline (sexit/Ginfo-kaptured?-set! o::sexit/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o kaptured?) v))
(define-inline (sexit/Ginfo-G?::bool o::sexit/Ginfo) (-> |#!bigloo_wallow| o G?))
(define-inline (sexit/Ginfo-G?-set! o::sexit/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o G?) v))
(define-inline (sexit/Ginfo-detached?::bool o::sexit/Ginfo) (-> |#!bigloo_wallow| o detached?))
(define-inline (sexit/Ginfo-detached?-set! o::sexit/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o detached?) v))
(define-inline (sexit/Ginfo-handler::obj o::sexit/Ginfo) (-> |#!bigloo_wallow| o handler))
(define-inline (sexit/Ginfo-handler-set! o::sexit/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o handler) v))

;; local/Ginfo
(define-inline (make-local/Ginfo::local/Ginfo id1243::symbol name1244::obj type1245::type value1246::value access1247::obj fast-alpha1248::obj removable1249::obj occurrence1250::long occurrencew1251::long user?1252::bool key1253::long escape?1254::bool globalized?1255::bool) (instantiate::local/Ginfo (id id1243) (name name1244) (type type1245) (value value1246) (access access1247) (fast-alpha fast-alpha1248) (removable removable1249) (occurrence occurrence1250) (occurrencew occurrencew1251) (user? user?1252) (key key1253) (escape? escape?1254) (globalized? globalized?1255)))
(define-inline (local/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ local/Ginfo globalize_ginfo)))
(define (local/Ginfo-nil::local/Ginfo) (class-nil (@ local/Ginfo globalize_ginfo)))
(define-inline (local/Ginfo-globalized?::bool o::local/Ginfo) (-> |#!bigloo_wallow| o globalized?))
(define-inline (local/Ginfo-globalized?-set! o::local/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o globalized?) v))
(define-inline (local/Ginfo-escape?::bool o::local/Ginfo) (-> |#!bigloo_wallow| o escape?))
(define-inline (local/Ginfo-escape?-set! o::local/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o escape?) v))
(define-inline (local/Ginfo-key::long o::local/Ginfo) (-> |#!bigloo_wallow| o key))
(define-inline (local/Ginfo-key-set! o::local/Ginfo v::long) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (local/Ginfo-user?::bool o::local/Ginfo) (-> |#!bigloo_wallow| o user?))
(define-inline (local/Ginfo-user?-set! o::local/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (local/Ginfo-occurrencew::long o::local/Ginfo) (-> |#!bigloo_wallow| o occurrencew))
(define-inline (local/Ginfo-occurrencew-set! o::local/Ginfo v::long) (set! (-> |#!bigloo_wallow| o occurrencew) v))
(define-inline (local/Ginfo-occurrence::long o::local/Ginfo) (-> |#!bigloo_wallow| o occurrence))
(define-inline (local/Ginfo-occurrence-set! o::local/Ginfo v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (local/Ginfo-removable::obj o::local/Ginfo) (-> |#!bigloo_wallow| o removable))
(define-inline (local/Ginfo-removable-set! o::local/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (local/Ginfo-fast-alpha::obj o::local/Ginfo) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (local/Ginfo-fast-alpha-set! o::local/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (local/Ginfo-access::obj o::local/Ginfo) (-> |#!bigloo_wallow| o access))
(define-inline (local/Ginfo-access-set! o::local/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (local/Ginfo-value::value o::local/Ginfo) (-> |#!bigloo_wallow| o value))
(define-inline (local/Ginfo-value-set! o::local/Ginfo v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (local/Ginfo-type::type o::local/Ginfo) (-> |#!bigloo_wallow| o type))
(define-inline (local/Ginfo-type-set! o::local/Ginfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (local/Ginfo-name::obj o::local/Ginfo) (-> |#!bigloo_wallow| o name))
(define-inline (local/Ginfo-name-set! o::local/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (local/Ginfo-id::symbol o::local/Ginfo) (-> |#!bigloo_wallow| o id))
(define-inline (local/Ginfo-id-set! o::local/Ginfo v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; global/Ginfo
(define-inline (make-global/Ginfo::global/Ginfo id1220::symbol name1221::obj type1222::type value1223::value access1224::obj fast-alpha1225::obj removable1226::obj occurrence1227::long occurrencew1228::long user?1229::bool module1230::symbol import1231::obj evaluable?1232::bool eval?1233::bool library1234::obj pragma1235::obj src1236::obj jvm-type-name1237::bstring init1238::obj alias1239::obj escape?1240::bool global-closure1241::obj) (instantiate::global/Ginfo (id id1220) (name name1221) (type type1222) (value value1223) (access access1224) (fast-alpha fast-alpha1225) (removable removable1226) (occurrence occurrence1227) (occurrencew occurrencew1228) (user? user?1229) (module module1230) (import import1231) (evaluable? evaluable?1232) (eval? eval?1233) (library library1234) (pragma pragma1235) (src src1236) (jvm-type-name jvm-type-name1237) (init init1238) (alias alias1239) (escape? escape?1240) (global-closure global-closure1241)))
(define-inline (global/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ global/Ginfo globalize_ginfo)))
(define (global/Ginfo-nil::global/Ginfo) (class-nil (@ global/Ginfo globalize_ginfo)))
(define-inline (global/Ginfo-global-closure::obj o::global/Ginfo) (-> |#!bigloo_wallow| o global-closure))
(define-inline (global/Ginfo-global-closure-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o global-closure) v))
(define-inline (global/Ginfo-escape?::bool o::global/Ginfo) (-> |#!bigloo_wallow| o escape?))
(define-inline (global/Ginfo-escape?-set! o::global/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o escape?) v))
(define-inline (global/Ginfo-alias::obj o::global/Ginfo) (-> |#!bigloo_wallow| o alias))
(define-inline (global/Ginfo-alias-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (global/Ginfo-init::obj o::global/Ginfo) (-> |#!bigloo_wallow| o init))
(define-inline (global/Ginfo-init-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o init) v))
(define-inline (global/Ginfo-jvm-type-name::bstring o::global/Ginfo) (-> |#!bigloo_wallow| o jvm-type-name))
(define-inline (global/Ginfo-jvm-type-name-set! o::global/Ginfo v::bstring) (set! (-> |#!bigloo_wallow| o jvm-type-name) v))
(define-inline (global/Ginfo-src::obj o::global/Ginfo) (-> |#!bigloo_wallow| o src))
(define-inline (global/Ginfo-src-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o src) v))
(define-inline (global/Ginfo-pragma::obj o::global/Ginfo) (-> |#!bigloo_wallow| o pragma))
(define-inline (global/Ginfo-pragma-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o pragma) v))
(define-inline (global/Ginfo-library::obj o::global/Ginfo) (-> |#!bigloo_wallow| o library))
(define-inline (global/Ginfo-library-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o library) v))
(define-inline (global/Ginfo-eval?::bool o::global/Ginfo) (-> |#!bigloo_wallow| o eval?))
(define-inline (global/Ginfo-eval?-set! o::global/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o eval?) v))
(define-inline (global/Ginfo-evaluable?::bool o::global/Ginfo) (-> |#!bigloo_wallow| o evaluable?))
(define-inline (global/Ginfo-evaluable?-set! o::global/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o evaluable?) v))
(define-inline (global/Ginfo-import::obj o::global/Ginfo) (-> |#!bigloo_wallow| o import))
(define-inline (global/Ginfo-import-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o import) v))
(define-inline (global/Ginfo-module::symbol o::global/Ginfo) (-> |#!bigloo_wallow| o module))
(define-inline (global/Ginfo-module-set! o::global/Ginfo v::symbol) (set! (-> |#!bigloo_wallow| o module) v))
(define-inline (global/Ginfo-user?::bool o::global/Ginfo) (-> |#!bigloo_wallow| o user?))
(define-inline (global/Ginfo-user?-set! o::global/Ginfo v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (global/Ginfo-occurrencew::long o::global/Ginfo) (-> |#!bigloo_wallow| o occurrencew))
(define-inline (global/Ginfo-occurrencew-set! o::global/Ginfo v::long) (set! (-> |#!bigloo_wallow| o occurrencew) v))
(define-inline (global/Ginfo-occurrence::long o::global/Ginfo) (-> |#!bigloo_wallow| o occurrence))
(define-inline (global/Ginfo-occurrence-set! o::global/Ginfo v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (global/Ginfo-removable::obj o::global/Ginfo) (-> |#!bigloo_wallow| o removable))
(define-inline (global/Ginfo-removable-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (global/Ginfo-fast-alpha::obj o::global/Ginfo) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (global/Ginfo-fast-alpha-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (global/Ginfo-access::obj o::global/Ginfo) (-> |#!bigloo_wallow| o access))
(define-inline (global/Ginfo-access-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (global/Ginfo-value::value o::global/Ginfo) (-> |#!bigloo_wallow| o value))
(define-inline (global/Ginfo-value-set! o::global/Ginfo v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (global/Ginfo-type::type o::global/Ginfo) (-> |#!bigloo_wallow| o type))
(define-inline (global/Ginfo-type-set! o::global/Ginfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (global/Ginfo-name::obj o::global/Ginfo) (-> |#!bigloo_wallow| o name))
(define-inline (global/Ginfo-name-set! o::global/Ginfo v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (global/Ginfo-id::symbol o::global/Ginfo) (-> |#!bigloo_wallow| o id))
(define-inline (global/Ginfo-id-set! o::global/Ginfo v::symbol) (set! (-> |#!bigloo_wallow| o id) v))
))
