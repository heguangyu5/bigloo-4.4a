;; ==========================================================
;; Class accessors
;; Bigloo (4.3b)
;; Inria -- Sophia Antipolis     Fri Apr 21 18:13:28 CEST 2017 
;; (bigloo.new -classgen Inline/size.scm)
;; ==========================================================

;; The directives
(directives

;; sized-sequence
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-sequence::sized-sequence loc1199::obj type1200::type side-effect1201::obj key1202::obj nodes1203::obj unsafe1204::bool size1205::long)
    (inline sized-sequence?::bool ::obj)
    (sized-sequence-nil::sized-sequence)
    (inline sized-sequence-size::long ::sized-sequence)
    (inline sized-sequence-unsafe::bool ::sized-sequence)
    (inline sized-sequence-nodes::obj ::sized-sequence)
    (inline sized-sequence-key::obj ::sized-sequence)
    (inline sized-sequence-key-set! ::sized-sequence ::obj)
    (inline sized-sequence-side-effect::obj ::sized-sequence)
    (inline sized-sequence-side-effect-set! ::sized-sequence ::obj)
    (inline sized-sequence-type::type ::sized-sequence)
    (inline sized-sequence-type-set! ::sized-sequence ::type)
    (inline sized-sequence-loc::obj ::sized-sequence))))

;; sized-sync
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-sync::sized-sync loc1191::obj type1192::type mutex1193::node prelock1194::node body1195::node size1196::long)
    (inline sized-sync?::bool ::obj)
    (sized-sync-nil::sized-sync)
    (inline sized-sync-size::long ::sized-sync)
    (inline sized-sync-body::node ::sized-sync)
    (inline sized-sync-body-set! ::sized-sync ::node)
    (inline sized-sync-prelock::node ::sized-sync)
    (inline sized-sync-prelock-set! ::sized-sync ::node)
    (inline sized-sync-mutex::node ::sized-sync)
    (inline sized-sync-mutex-set! ::sized-sync ::node)
    (inline sized-sync-type::type ::sized-sync)
    (inline sized-sync-type-set! ::sized-sync ::type)
    (inline sized-sync-loc::obj ::sized-sync))))

;; sized-switch
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-switch::sized-switch loc1181::obj type1182::type side-effect1183::obj key1184::obj test1185::node clauses1186::obj item-type1187::type size1188::long)
    (inline sized-switch?::bool ::obj)
    (sized-switch-nil::sized-switch)
    (inline sized-switch-size::long ::sized-switch)
    (inline sized-switch-item-type::type ::sized-switch)
    (inline sized-switch-item-type-set! ::sized-switch ::type)
    (inline sized-switch-clauses::obj ::sized-switch)
    (inline sized-switch-test::node ::sized-switch)
    (inline sized-switch-test-set! ::sized-switch ::node)
    (inline sized-switch-key::obj ::sized-switch)
    (inline sized-switch-key-set! ::sized-switch ::obj)
    (inline sized-switch-side-effect::obj ::sized-switch)
    (inline sized-switch-side-effect-set! ::sized-switch ::obj)
    (inline sized-switch-type::type ::sized-switch)
    (inline sized-switch-type-set! ::sized-switch ::type)
    (inline sized-switch-loc::obj ::sized-switch))))

;; sized-let-fun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-let-fun::sized-let-fun loc1173::obj type1174::type side-effect1175::obj key1176::obj locals1177::obj body1178::node size1179::long)
    (inline sized-let-fun?::bool ::obj)
    (sized-let-fun-nil::sized-let-fun)
    (inline sized-let-fun-size::long ::sized-let-fun)
    (inline sized-let-fun-body::node ::sized-let-fun)
    (inline sized-let-fun-body-set! ::sized-let-fun ::node)
    (inline sized-let-fun-locals::obj ::sized-let-fun)
    (inline sized-let-fun-locals-set! ::sized-let-fun ::obj)
    (inline sized-let-fun-key::obj ::sized-let-fun)
    (inline sized-let-fun-key-set! ::sized-let-fun ::obj)
    (inline sized-let-fun-side-effect::obj ::sized-let-fun)
    (inline sized-let-fun-side-effect-set! ::sized-let-fun ::obj)
    (inline sized-let-fun-type::type ::sized-let-fun)
    (inline sized-let-fun-type-set! ::sized-let-fun ::type)
    (inline sized-let-fun-loc::obj ::sized-let-fun))))

;; sized-let-var
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-let-var::sized-let-var loc1164::obj type1165::type side-effect1166::obj key1167::obj bindings1168::obj body1169::node removable?1170::bool size1171::long)
    (inline sized-let-var?::bool ::obj)
    (sized-let-var-nil::sized-let-var)
    (inline sized-let-var-size::long ::sized-let-var)
    (inline sized-let-var-removable?::bool ::sized-let-var)
    (inline sized-let-var-removable?-set! ::sized-let-var ::bool)
    (inline sized-let-var-body::node ::sized-let-var)
    (inline sized-let-var-body-set! ::sized-let-var ::node)
    (inline sized-let-var-bindings::obj ::sized-let-var)
    (inline sized-let-var-bindings-set! ::sized-let-var ::obj)
    (inline sized-let-var-key::obj ::sized-let-var)
    (inline sized-let-var-key-set! ::sized-let-var ::obj)
    (inline sized-let-var-side-effect::obj ::sized-let-var)
    (inline sized-let-var-side-effect-set! ::sized-let-var ::obj)
    (inline sized-let-var-type::type ::sized-let-var)
    (inline sized-let-var-type-set! ::sized-let-var ::type)
    (inline sized-let-var-loc::obj ::sized-let-var)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; sized-sequence
(define-inline (make-sized-sequence::sized-sequence loc1199::obj type1200::type side-effect1201::obj key1202::obj nodes1203::obj unsafe1204::bool size1205::long) (instantiate::sized-sequence (loc loc1199) (type type1200) (side-effect side-effect1201) (key key1202) (nodes nodes1203) (unsafe unsafe1204) (size size1205)))
(define-inline (sized-sequence?::bool obj::obj) ((@ isa? __object) obj (@ sized-sequence inline_size)))
(define (sized-sequence-nil::sized-sequence) (class-nil (@ sized-sequence inline_size)))
(define-inline (sized-sequence-size::long o::sized-sequence) (-> |#!bigloo_wallow| o size))
(define-inline (sized-sequence-size-set! o::sized-sequence v::long) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (sized-sequence-unsafe::bool o::sized-sequence) (-> |#!bigloo_wallow| o unsafe))
(define-inline (sized-sequence-unsafe-set! o::sized-sequence v::bool) (set! (-> |#!bigloo_wallow| o unsafe) v))
(define-inline (sized-sequence-nodes::obj o::sized-sequence) (-> |#!bigloo_wallow| o nodes))
(define-inline (sized-sequence-nodes-set! o::sized-sequence v::obj) (set! (-> |#!bigloo_wallow| o nodes) v))
(define-inline (sized-sequence-key::obj o::sized-sequence) (-> |#!bigloo_wallow| o key))
(define-inline (sized-sequence-key-set! o::sized-sequence v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (sized-sequence-side-effect::obj o::sized-sequence) (-> |#!bigloo_wallow| o side-effect))
(define-inline (sized-sequence-side-effect-set! o::sized-sequence v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (sized-sequence-type::type o::sized-sequence) (-> |#!bigloo_wallow| o type))
(define-inline (sized-sequence-type-set! o::sized-sequence v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sized-sequence-loc::obj o::sized-sequence) (-> |#!bigloo_wallow| o loc))
(define-inline (sized-sequence-loc-set! o::sized-sequence v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sized-sync
(define-inline (make-sized-sync::sized-sync loc1191::obj type1192::type mutex1193::node prelock1194::node body1195::node size1196::long) (instantiate::sized-sync (loc loc1191) (type type1192) (mutex mutex1193) (prelock prelock1194) (body body1195) (size size1196)))
(define-inline (sized-sync?::bool obj::obj) ((@ isa? __object) obj (@ sized-sync inline_size)))
(define (sized-sync-nil::sized-sync) (class-nil (@ sized-sync inline_size)))
(define-inline (sized-sync-size::long o::sized-sync) (-> |#!bigloo_wallow| o size))
(define-inline (sized-sync-size-set! o::sized-sync v::long) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (sized-sync-body::node o::sized-sync) (-> |#!bigloo_wallow| o body))
(define-inline (sized-sync-body-set! o::sized-sync v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (sized-sync-prelock::node o::sized-sync) (-> |#!bigloo_wallow| o prelock))
(define-inline (sized-sync-prelock-set! o::sized-sync v::node) (set! (-> |#!bigloo_wallow| o prelock) v))
(define-inline (sized-sync-mutex::node o::sized-sync) (-> |#!bigloo_wallow| o mutex))
(define-inline (sized-sync-mutex-set! o::sized-sync v::node) (set! (-> |#!bigloo_wallow| o mutex) v))
(define-inline (sized-sync-type::type o::sized-sync) (-> |#!bigloo_wallow| o type))
(define-inline (sized-sync-type-set! o::sized-sync v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sized-sync-loc::obj o::sized-sync) (-> |#!bigloo_wallow| o loc))
(define-inline (sized-sync-loc-set! o::sized-sync v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sized-switch
(define-inline (make-sized-switch::sized-switch loc1181::obj type1182::type side-effect1183::obj key1184::obj test1185::node clauses1186::obj item-type1187::type size1188::long) (instantiate::sized-switch (loc loc1181) (type type1182) (side-effect side-effect1183) (key key1184) (test test1185) (clauses clauses1186) (item-type item-type1187) (size size1188)))
(define-inline (sized-switch?::bool obj::obj) ((@ isa? __object) obj (@ sized-switch inline_size)))
(define (sized-switch-nil::sized-switch) (class-nil (@ sized-switch inline_size)))
(define-inline (sized-switch-size::long o::sized-switch) (-> |#!bigloo_wallow| o size))
(define-inline (sized-switch-size-set! o::sized-switch v::long) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (sized-switch-item-type::type o::sized-switch) (-> |#!bigloo_wallow| o item-type))
(define-inline (sized-switch-item-type-set! o::sized-switch v::type) (set! (-> |#!bigloo_wallow| o item-type) v))
(define-inline (sized-switch-clauses::obj o::sized-switch) (-> |#!bigloo_wallow| o clauses))
(define-inline (sized-switch-clauses-set! o::sized-switch v::obj) (set! (-> |#!bigloo_wallow| o clauses) v))
(define-inline (sized-switch-test::node o::sized-switch) (-> |#!bigloo_wallow| o test))
(define-inline (sized-switch-test-set! o::sized-switch v::node) (set! (-> |#!bigloo_wallow| o test) v))
(define-inline (sized-switch-key::obj o::sized-switch) (-> |#!bigloo_wallow| o key))
(define-inline (sized-switch-key-set! o::sized-switch v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (sized-switch-side-effect::obj o::sized-switch) (-> |#!bigloo_wallow| o side-effect))
(define-inline (sized-switch-side-effect-set! o::sized-switch v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (sized-switch-type::type o::sized-switch) (-> |#!bigloo_wallow| o type))
(define-inline (sized-switch-type-set! o::sized-switch v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sized-switch-loc::obj o::sized-switch) (-> |#!bigloo_wallow| o loc))
(define-inline (sized-switch-loc-set! o::sized-switch v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sized-let-fun
(define-inline (make-sized-let-fun::sized-let-fun loc1173::obj type1174::type side-effect1175::obj key1176::obj locals1177::obj body1178::node size1179::long) (instantiate::sized-let-fun (loc loc1173) (type type1174) (side-effect side-effect1175) (key key1176) (locals locals1177) (body body1178) (size size1179)))
(define-inline (sized-let-fun?::bool obj::obj) ((@ isa? __object) obj (@ sized-let-fun inline_size)))
(define (sized-let-fun-nil::sized-let-fun) (class-nil (@ sized-let-fun inline_size)))
(define-inline (sized-let-fun-size::long o::sized-let-fun) (-> |#!bigloo_wallow| o size))
(define-inline (sized-let-fun-size-set! o::sized-let-fun v::long) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (sized-let-fun-body::node o::sized-let-fun) (-> |#!bigloo_wallow| o body))
(define-inline (sized-let-fun-body-set! o::sized-let-fun v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (sized-let-fun-locals::obj o::sized-let-fun) (-> |#!bigloo_wallow| o locals))
(define-inline (sized-let-fun-locals-set! o::sized-let-fun v::obj) (set! (-> |#!bigloo_wallow| o locals) v))
(define-inline (sized-let-fun-key::obj o::sized-let-fun) (-> |#!bigloo_wallow| o key))
(define-inline (sized-let-fun-key-set! o::sized-let-fun v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (sized-let-fun-side-effect::obj o::sized-let-fun) (-> |#!bigloo_wallow| o side-effect))
(define-inline (sized-let-fun-side-effect-set! o::sized-let-fun v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (sized-let-fun-type::type o::sized-let-fun) (-> |#!bigloo_wallow| o type))
(define-inline (sized-let-fun-type-set! o::sized-let-fun v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sized-let-fun-loc::obj o::sized-let-fun) (-> |#!bigloo_wallow| o loc))
(define-inline (sized-let-fun-loc-set! o::sized-let-fun v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sized-let-var
(define-inline (make-sized-let-var::sized-let-var loc1164::obj type1165::type side-effect1166::obj key1167::obj bindings1168::obj body1169::node removable?1170::bool size1171::long) (instantiate::sized-let-var (loc loc1164) (type type1165) (side-effect side-effect1166) (key key1167) (bindings bindings1168) (body body1169) (removable? removable?1170) (size size1171)))
(define-inline (sized-let-var?::bool obj::obj) ((@ isa? __object) obj (@ sized-let-var inline_size)))
(define (sized-let-var-nil::sized-let-var) (class-nil (@ sized-let-var inline_size)))
(define-inline (sized-let-var-size::long o::sized-let-var) (-> |#!bigloo_wallow| o size))
(define-inline (sized-let-var-size-set! o::sized-let-var v::long) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (sized-let-var-removable?::bool o::sized-let-var) (-> |#!bigloo_wallow| o removable?))
(define-inline (sized-let-var-removable?-set! o::sized-let-var v::bool) (set! (-> |#!bigloo_wallow| o removable?) v))
(define-inline (sized-let-var-body::node o::sized-let-var) (-> |#!bigloo_wallow| o body))
(define-inline (sized-let-var-body-set! o::sized-let-var v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (sized-let-var-bindings::obj o::sized-let-var) (-> |#!bigloo_wallow| o bindings))
(define-inline (sized-let-var-bindings-set! o::sized-let-var v::obj) (set! (-> |#!bigloo_wallow| o bindings) v))
(define-inline (sized-let-var-key::obj o::sized-let-var) (-> |#!bigloo_wallow| o key))
(define-inline (sized-let-var-key-set! o::sized-let-var v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (sized-let-var-side-effect::obj o::sized-let-var) (-> |#!bigloo_wallow| o side-effect))
(define-inline (sized-let-var-side-effect-set! o::sized-let-var v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (sized-let-var-type::type o::sized-let-var) (-> |#!bigloo_wallow| o type))
(define-inline (sized-let-var-type-set! o::sized-let-var v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sized-let-var-loc::obj o::sized-let-var) (-> |#!bigloo_wallow| o loc))
(define-inline (sized-let-var-loc-set! o::sized-let-var v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
))
