;; ==========================================================
;; Class accessors
;; Bigloo (4.4a)
;; Inria -- Sophia Antipolis     Sun 20 Sep 2020 02:36:10 PM CEST 
;; (bigloo -classgen Ast/node.scm -o Ast/nodetype.sch)
;; ==========================================================

;; The directives
(directives

;; node
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-node::node loc1745::obj type1746::type)
    (inline node?::bool ::obj)
    (node-nil::node)
    (inline node-type::type ::node)
    (inline node-type-set! ::node ::type)
    (inline node-loc::obj ::node))))

;; node/effect
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-node/effect::node/effect loc1740::obj type1741::type side-effect1742::obj key1743::obj)
    (inline node/effect?::bool ::obj)
    (node/effect-nil::node/effect)
    (inline node/effect-key::obj ::node/effect)
    (inline node/effect-key-set! ::node/effect ::obj)
    (inline node/effect-side-effect::obj ::node/effect)
    (inline node/effect-side-effect-set! ::node/effect ::obj)
    (inline node/effect-type::type ::node/effect)
    (inline node/effect-type-set! ::node/effect ::type)
    (inline node/effect-loc::obj ::node/effect))))

;; atom
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline atom?::bool ::obj)
    (atom-nil::atom)
    (inline atom-value::obj ::atom)
    (inline atom-value-set! ::atom ::obj)
    (inline atom-type::type ::atom)
    (inline atom-type-set! ::atom ::type)
    (inline atom-loc::obj ::atom))))

;; literal
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-literal::literal loc1735::obj type1736::type value1737::obj)
    (inline literal?::bool ::obj)
    (literal-nil::literal)
    (inline literal-value::obj ::literal)
    (inline literal-value-set! ::literal ::obj)
    (inline literal-type::type ::literal)
    (inline literal-type-set! ::literal ::type)
    (inline literal-loc::obj ::literal))))

;; patch
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-patch::patch loc1728::obj type1729::type value1730::obj ref1731::var index1732::long patchid1733::obj)
    (inline patch?::bool ::obj)
    (patch-nil::patch)
    (inline patch-patchid::obj ::patch)
    (inline patch-patchid-set! ::patch ::obj)
    (inline patch-index::long ::patch)
    (inline patch-index-set! ::patch ::long)
    (inline patch-ref::var ::patch)
    (inline patch-value::obj ::patch)
    (inline patch-value-set! ::patch ::obj)
    (inline patch-type::type ::patch)
    (inline patch-type-set! ::patch ::type)
    (inline patch-loc::obj ::patch))))

;; var
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-var::var loc1724::obj type1725::type variable1726::variable)
    (inline var?::bool ::obj)
    (var-nil::var)
    (inline var-variable::variable ::var)
    (inline var-variable-set! ::var ::variable)
    (inline var-type::type ::var)
    (inline var-type-set! ::var ::type)
    (inline var-loc::obj ::var))))

;; closure
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-closure::closure loc1720::obj type1721::type variable1722::variable)
    (inline closure?::bool ::obj)
    (closure-nil::closure)
    (inline closure-variable::variable ::closure)
    (inline closure-variable-set! ::closure ::variable)
    (inline closure-type::type ::closure)
    (inline closure-type-set! ::closure ::type)
    (inline closure-loc::obj ::closure))))

;; kwote
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-kwote::kwote loc1716::obj type1717::type value1718::obj)
    (inline kwote?::bool ::obj)
    (kwote-nil::kwote)
    (inline kwote-value::obj ::kwote)
    (inline kwote-type::type ::kwote)
    (inline kwote-type-set! ::kwote ::type)
    (inline kwote-loc::obj ::kwote))))

;; sequence
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sequence::sequence loc1708::obj type1709::type side-effect1710::obj key1711::obj nodes1712::pair-nil unsafe1713::bool meta1714::pair-nil)
    (inline sequence?::bool ::obj)
    (sequence-nil::sequence)
    (inline sequence-meta::pair-nil ::sequence)
    (inline sequence-unsafe::bool ::sequence)
    (inline sequence-nodes::pair-nil ::sequence)
    (inline sequence-key::obj ::sequence)
    (inline sequence-key-set! ::sequence ::obj)
    (inline sequence-side-effect::obj ::sequence)
    (inline sequence-side-effect-set! ::sequence ::obj)
    (inline sequence-type::type ::sequence)
    (inline sequence-type-set! ::sequence ::type)
    (inline sequence-loc::obj ::sequence))))

;; app
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-app::app loc1700::obj type1701::type side-effect1702::obj key1703::obj fun1704::var args1705::obj stackable1706::obj)
    (inline app?::bool ::obj)
    (app-nil::app)
    (inline app-stackable::obj ::app)
    (inline app-stackable-set! ::app ::obj)
    (inline app-args::obj ::app)
    (inline app-args-set! ::app ::obj)
    (inline app-fun::var ::app)
    (inline app-fun-set! ::app ::var)
    (inline app-key::obj ::app)
    (inline app-key-set! ::app ::obj)
    (inline app-side-effect::obj ::app)
    (inline app-side-effect-set! ::app ::obj)
    (inline app-type::type ::app)
    (inline app-type-set! ::app ::type)
    (inline app-loc::obj ::app))))

;; app-ly
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-app-ly::app-ly loc1695::obj type1696::type fun1697::node arg1698::node)
    (inline app-ly?::bool ::obj)
    (app-ly-nil::app-ly)
    (inline app-ly-arg::node ::app-ly)
    (inline app-ly-arg-set! ::app-ly ::node)
    (inline app-ly-fun::node ::app-ly)
    (inline app-ly-fun-set! ::app-ly ::node)
    (inline app-ly-type::type ::app-ly)
    (inline app-ly-type-set! ::app-ly ::type)
    (inline app-ly-loc::obj ::app-ly))))

;; funcall
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-funcall::funcall loc1688::obj type1689::type fun1690::node args1691::obj strength1692::symbol functions1693::obj)
    (inline funcall?::bool ::obj)
    (funcall-nil::funcall)
    (inline funcall-functions::obj ::funcall)
    (inline funcall-functions-set! ::funcall ::obj)
    (inline funcall-strength::symbol ::funcall)
    (inline funcall-strength-set! ::funcall ::symbol)
    (inline funcall-args::obj ::funcall)
    (inline funcall-args-set! ::funcall ::obj)
    (inline funcall-fun::node ::funcall)
    (inline funcall-fun-set! ::funcall ::node)
    (inline funcall-type::type ::funcall)
    (inline funcall-type-set! ::funcall ::type)
    (inline funcall-loc::obj ::funcall))))

;; extern
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-extern::extern loc1681::obj type1682::type side-effect1683::obj key1684::obj expr*1685::pair-nil effect1686::obj)
    (inline extern?::bool ::obj)
    (extern-nil::extern)
    (inline extern-effect::obj ::extern)
    (inline extern-effect-set! ::extern ::obj)
    (inline extern-expr*::pair-nil ::extern)
    (inline extern-expr*-set! ::extern ::pair-nil)
    (inline extern-key::obj ::extern)
    (inline extern-key-set! ::extern ::obj)
    (inline extern-side-effect::obj ::extern)
    (inline extern-side-effect-set! ::extern ::obj)
    (inline extern-type::type ::extern)
    (inline extern-type-set! ::extern ::type)
    (inline extern-loc::obj ::extern))))

;; pragma
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pragma::pragma loc1673::obj type1674::type side-effect1675::obj key1676::obj expr*1677::pair-nil effect1678::obj format1679::bstring)
    (inline pragma?::bool ::obj)
    (pragma-nil::pragma)
    (inline pragma-format::bstring ::pragma)
    (inline pragma-effect::obj ::pragma)
    (inline pragma-effect-set! ::pragma ::obj)
    (inline pragma-expr*::pair-nil ::pragma)
    (inline pragma-expr*-set! ::pragma ::pair-nil)
    (inline pragma-key::obj ::pragma)
    (inline pragma-key-set! ::pragma ::obj)
    (inline pragma-side-effect::obj ::pragma)
    (inline pragma-side-effect-set! ::pragma ::obj)
    (inline pragma-type::type ::pragma)
    (inline pragma-type-set! ::pragma ::type)
    (inline pragma-loc::obj ::pragma))))

;; genpatchid
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-genpatchid::genpatchid loc1664::obj type1665::type side-effect1666::obj key1667::obj expr*1668::pair-nil effect1669::obj index1670::long rindex1671::long)
    (inline genpatchid?::bool ::obj)
    (genpatchid-nil::genpatchid)
    (inline genpatchid-rindex::long ::genpatchid)
    (inline genpatchid-rindex-set! ::genpatchid ::long)
    (inline genpatchid-index::long ::genpatchid)
    (inline genpatchid-index-set! ::genpatchid ::long)
    (inline genpatchid-effect::obj ::genpatchid)
    (inline genpatchid-effect-set! ::genpatchid ::obj)
    (inline genpatchid-expr*::pair-nil ::genpatchid)
    (inline genpatchid-expr*-set! ::genpatchid ::pair-nil)
    (inline genpatchid-key::obj ::genpatchid)
    (inline genpatchid-key-set! ::genpatchid ::obj)
    (inline genpatchid-side-effect::obj ::genpatchid)
    (inline genpatchid-side-effect-set! ::genpatchid ::obj)
    (inline genpatchid-type::type ::genpatchid)
    (inline genpatchid-type-set! ::genpatchid ::type)
    (inline genpatchid-loc::obj ::genpatchid))))

;; private
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-private::private loc1656::obj type1657::type side-effect1658::obj key1659::obj expr*1660::pair-nil effect1661::obj c-format1662::bstring)
    (inline private?::bool ::obj)
    (private-nil::private)
    (inline private-c-format::bstring ::private)
    (inline private-effect::obj ::private)
    (inline private-effect-set! ::private ::obj)
    (inline private-expr*::pair-nil ::private)
    (inline private-expr*-set! ::private ::pair-nil)
    (inline private-key::obj ::private)
    (inline private-key-set! ::private ::obj)
    (inline private-side-effect::obj ::private)
    (inline private-side-effect-set! ::private ::obj)
    (inline private-type::type ::private)
    (inline private-type-set! ::private ::type)
    (inline private-loc::obj ::private))))

;; getfield
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-getfield::getfield loc1645::obj type1646::type side-effect1647::obj key1648::obj expr*1649::pair-nil effect1650::obj c-format1651::bstring fname1652::bstring ftype1653::type otype1654::type)
    (inline getfield?::bool ::obj)
    (getfield-nil::getfield)
    (inline getfield-otype::type ::getfield)
    (inline getfield-otype-set! ::getfield ::type)
    (inline getfield-ftype::type ::getfield)
    (inline getfield-ftype-set! ::getfield ::type)
    (inline getfield-fname::bstring ::getfield)
    (inline getfield-c-format::bstring ::getfield)
    (inline getfield-effect::obj ::getfield)
    (inline getfield-effect-set! ::getfield ::obj)
    (inline getfield-expr*::pair-nil ::getfield)
    (inline getfield-expr*-set! ::getfield ::pair-nil)
    (inline getfield-key::obj ::getfield)
    (inline getfield-key-set! ::getfield ::obj)
    (inline getfield-side-effect::obj ::getfield)
    (inline getfield-side-effect-set! ::getfield ::obj)
    (inline getfield-type::type ::getfield)
    (inline getfield-type-set! ::getfield ::type)
    (inline getfield-loc::obj ::getfield))))

;; setfield
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-setfield::setfield loc1634::obj type1635::type side-effect1636::obj key1637::obj expr*1638::pair-nil effect1639::obj c-format1640::bstring fname1641::bstring ftype1642::type otype1643::type)
    (inline setfield?::bool ::obj)
    (setfield-nil::setfield)
    (inline setfield-otype::type ::setfield)
    (inline setfield-otype-set! ::setfield ::type)
    (inline setfield-ftype::type ::setfield)
    (inline setfield-ftype-set! ::setfield ::type)
    (inline setfield-fname::bstring ::setfield)
    (inline setfield-c-format::bstring ::setfield)
    (inline setfield-effect::obj ::setfield)
    (inline setfield-effect-set! ::setfield ::obj)
    (inline setfield-expr*::pair-nil ::setfield)
    (inline setfield-expr*-set! ::setfield ::pair-nil)
    (inline setfield-key::obj ::setfield)
    (inline setfield-key-set! ::setfield ::obj)
    (inline setfield-side-effect::obj ::setfield)
    (inline setfield-side-effect-set! ::setfield ::obj)
    (inline setfield-type::type ::setfield)
    (inline setfield-type-set! ::setfield ::type)
    (inline setfield-loc::obj ::setfield))))

;; widening
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-widening::widening loc1625::obj type1626::type side-effect1627::obj key1628::obj expr*1629::pair-nil effect1630::obj c-format1631::bstring otype1632::type)
    (inline widening?::bool ::obj)
    (widening-nil::widening)
    (inline widening-otype::type ::widening)
    (inline widening-otype-set! ::widening ::type)
    (inline widening-c-format::bstring ::widening)
    (inline widening-effect::obj ::widening)
    (inline widening-effect-set! ::widening ::obj)
    (inline widening-expr*::pair-nil ::widening)
    (inline widening-expr*-set! ::widening ::pair-nil)
    (inline widening-key::obj ::widening)
    (inline widening-key-set! ::widening ::obj)
    (inline widening-side-effect::obj ::widening)
    (inline widening-side-effect-set! ::widening ::obj)
    (inline widening-type::type ::widening)
    (inline widening-type-set! ::widening ::type)
    (inline widening-loc::obj ::widening))))

;; new
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-new::new loc1616::obj type1617::type side-effect1618::obj key1619::obj expr*1620::pair-nil effect1621::obj c-format1622::bstring args-type1623::pair-nil)
    (inline new?::bool ::obj)
    (new-nil::new)
    (inline new-args-type::pair-nil ::new)
    (inline new-args-type-set! ::new ::pair-nil)
    (inline new-c-format::bstring ::new)
    (inline new-effect::obj ::new)
    (inline new-effect-set! ::new ::obj)
    (inline new-expr*::pair-nil ::new)
    (inline new-expr*-set! ::new ::pair-nil)
    (inline new-key::obj ::new)
    (inline new-key-set! ::new ::obj)
    (inline new-side-effect::obj ::new)
    (inline new-side-effect-set! ::new ::obj)
    (inline new-type::type ::new)
    (inline new-type-set! ::new ::type)
    (inline new-loc::obj ::new))))

;; valloc
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-valloc::valloc loc1606::obj type1607::type side-effect1608::obj key1609::obj expr*1610::pair-nil effect1611::obj c-format1612::bstring ftype1613::type otype1614::type)
    (inline valloc?::bool ::obj)
    (valloc-nil::valloc)
    (inline valloc-otype::type ::valloc)
    (inline valloc-otype-set! ::valloc ::type)
    (inline valloc-ftype::type ::valloc)
    (inline valloc-ftype-set! ::valloc ::type)
    (inline valloc-c-format::bstring ::valloc)
    (inline valloc-effect::obj ::valloc)
    (inline valloc-effect-set! ::valloc ::obj)
    (inline valloc-expr*::pair-nil ::valloc)
    (inline valloc-expr*-set! ::valloc ::pair-nil)
    (inline valloc-key::obj ::valloc)
    (inline valloc-key-set! ::valloc ::obj)
    (inline valloc-side-effect::obj ::valloc)
    (inline valloc-side-effect-set! ::valloc ::obj)
    (inline valloc-type::type ::valloc)
    (inline valloc-type-set! ::valloc ::type)
    (inline valloc-loc::obj ::valloc))))

;; vref
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vref::vref loc1594::obj type1595::type side-effect1596::obj key1597::obj expr*1598::pair-nil effect1599::obj c-format1600::bstring ftype1601::type otype1602::type vtype1603::type unsafe1604::bool)
    (inline vref?::bool ::obj)
    (vref-nil::vref)
    (inline vref-unsafe::bool ::vref)
    (inline vref-vtype::type ::vref)
    (inline vref-vtype-set! ::vref ::type)
    (inline vref-otype::type ::vref)
    (inline vref-otype-set! ::vref ::type)
    (inline vref-ftype::type ::vref)
    (inline vref-ftype-set! ::vref ::type)
    (inline vref-c-format::bstring ::vref)
    (inline vref-effect::obj ::vref)
    (inline vref-effect-set! ::vref ::obj)
    (inline vref-expr*::pair-nil ::vref)
    (inline vref-expr*-set! ::vref ::pair-nil)
    (inline vref-key::obj ::vref)
    (inline vref-key-set! ::vref ::obj)
    (inline vref-side-effect::obj ::vref)
    (inline vref-side-effect-set! ::vref ::obj)
    (inline vref-type::type ::vref)
    (inline vref-type-set! ::vref ::type)
    (inline vref-loc::obj ::vref))))

;; vset!
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vset!::vset! loc1582::obj type1583::type side-effect1584::obj key1585::obj expr*1586::pair-nil effect1587::obj c-format1588::bstring ftype1589::type otype1590::type vtype1591::type unsafe1592::bool)
    (inline vset!?::bool ::obj)
    (vset!-nil::vset!)
    (inline vset!-unsafe::bool ::vset!)
    (inline vset!-vtype::type ::vset!)
    (inline vset!-vtype-set! ::vset! ::type)
    (inline vset!-otype::type ::vset!)
    (inline vset!-otype-set! ::vset! ::type)
    (inline vset!-ftype::type ::vset!)
    (inline vset!-ftype-set! ::vset! ::type)
    (inline vset!-c-format::bstring ::vset!)
    (inline vset!-effect::obj ::vset!)
    (inline vset!-effect-set! ::vset! ::obj)
    (inline vset!-expr*::pair-nil ::vset!)
    (inline vset!-expr*-set! ::vset! ::pair-nil)
    (inline vset!-key::obj ::vset!)
    (inline vset!-key-set! ::vset! ::obj)
    (inline vset!-side-effect::obj ::vset!)
    (inline vset!-side-effect-set! ::vset! ::obj)
    (inline vset!-type::type ::vset!)
    (inline vset!-type-set! ::vset! ::type)
    (inline vset!-loc::obj ::vset!))))

;; vlength
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vlength::vlength loc1572::obj type1573::type side-effect1574::obj key1575::obj expr*1576::pair-nil effect1577::obj c-format1578::bstring vtype1579::type ftype1580::obj)
    (inline vlength?::bool ::obj)
    (vlength-nil::vlength)
    (inline vlength-ftype::obj ::vlength)
    (inline vlength-vtype::type ::vlength)
    (inline vlength-vtype-set! ::vlength ::type)
    (inline vlength-c-format::bstring ::vlength)
    (inline vlength-effect::obj ::vlength)
    (inline vlength-effect-set! ::vlength ::obj)
    (inline vlength-expr*::pair-nil ::vlength)
    (inline vlength-expr*-set! ::vlength ::pair-nil)
    (inline vlength-key::obj ::vlength)
    (inline vlength-key-set! ::vlength ::obj)
    (inline vlength-side-effect::obj ::vlength)
    (inline vlength-side-effect-set! ::vlength ::obj)
    (inline vlength-type::type ::vlength)
    (inline vlength-type-set! ::vlength ::type)
    (inline vlength-loc::obj ::vlength))))

;; instanceof
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-instanceof::instanceof loc1563::obj type1564::type side-effect1565::obj key1566::obj expr*1567::pair-nil effect1568::obj c-format1569::bstring class1570::type)
    (inline instanceof?::bool ::obj)
    (instanceof-nil::instanceof)
    (inline instanceof-class::type ::instanceof)
    (inline instanceof-class-set! ::instanceof ::type)
    (inline instanceof-c-format::bstring ::instanceof)
    (inline instanceof-effect::obj ::instanceof)
    (inline instanceof-effect-set! ::instanceof ::obj)
    (inline instanceof-expr*::pair-nil ::instanceof)
    (inline instanceof-expr*-set! ::instanceof ::pair-nil)
    (inline instanceof-key::obj ::instanceof)
    (inline instanceof-key-set! ::instanceof ::obj)
    (inline instanceof-side-effect::obj ::instanceof)
    (inline instanceof-side-effect-set! ::instanceof ::obj)
    (inline instanceof-type::type ::instanceof)
    (inline instanceof-type-set! ::instanceof ::type)
    (inline instanceof-loc::obj ::instanceof))))

;; cast-null
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cast-null::cast-null loc1555::obj type1556::type side-effect1557::obj key1558::obj expr*1559::pair-nil effect1560::obj c-format1561::bstring)
    (inline cast-null?::bool ::obj)
    (cast-null-nil::cast-null)
    (inline cast-null-c-format::bstring ::cast-null)
    (inline cast-null-effect::obj ::cast-null)
    (inline cast-null-effect-set! ::cast-null ::obj)
    (inline cast-null-expr*::pair-nil ::cast-null)
    (inline cast-null-expr*-set! ::cast-null ::pair-nil)
    (inline cast-null-key::obj ::cast-null)
    (inline cast-null-key-set! ::cast-null ::obj)
    (inline cast-null-side-effect::obj ::cast-null)
    (inline cast-null-side-effect-set! ::cast-null ::obj)
    (inline cast-null-type::type ::cast-null)
    (inline cast-null-type-set! ::cast-null ::type)
    (inline cast-null-loc::obj ::cast-null))))

;; cast
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cast::cast loc1548::obj type1549::type arg1553::node)
    (inline cast?::bool ::obj)
    (cast-nil::cast)
    (inline cast-arg::node ::cast)
    (inline cast-arg-set! ::cast ::node)
    (inline cast-type::type ::cast)
    (inline cast-type-set! ::cast ::type)
    (inline cast-loc::obj ::cast))))

;; setq
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-setq::setq loc1543::obj type1544::type var1545::var value1546::node)
    (inline setq?::bool ::obj)
    (setq-nil::setq)
    (inline setq-value::node ::setq)
    (inline setq-value-set! ::setq ::node)
    (inline setq-var::var ::setq)
    (inline setq-var-set! ::setq ::var)
    (inline setq-type::type ::setq)
    (inline setq-type-set! ::setq ::type)
    (inline setq-loc::obj ::setq))))

;; conditional
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-conditional::conditional loc1535::obj type1536::type side-effect1537::obj key1538::obj test1539::node true1540::node false1541::node)
    (inline conditional?::bool ::obj)
    (conditional-nil::conditional)
    (inline conditional-false::node ::conditional)
    (inline conditional-false-set! ::conditional ::node)
    (inline conditional-true::node ::conditional)
    (inline conditional-true-set! ::conditional ::node)
    (inline conditional-test::node ::conditional)
    (inline conditional-test-set! ::conditional ::node)
    (inline conditional-key::obj ::conditional)
    (inline conditional-key-set! ::conditional ::obj)
    (inline conditional-side-effect::obj ::conditional)
    (inline conditional-side-effect-set! ::conditional ::obj)
    (inline conditional-type::type ::conditional)
    (inline conditional-type-set! ::conditional ::type)
    (inline conditional-loc::obj ::conditional))))

;; fail
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-fail::fail loc1529::obj type1530::type proc1531::node msg1532::node obj1533::node)
    (inline fail?::bool ::obj)
    (fail-nil::fail)
    (inline fail-obj::node ::fail)
    (inline fail-obj-set! ::fail ::node)
    (inline fail-msg::node ::fail)
    (inline fail-msg-set! ::fail ::node)
    (inline fail-proc::node ::fail)
    (inline fail-proc-set! ::fail ::node)
    (inline fail-type::type ::fail)
    (inline fail-type-set! ::fail ::type)
    (inline fail-loc::obj ::fail))))

;; switch
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-switch::switch loc1521::obj type1522::type side-effect1523::obj key1524::obj test1525::node clauses1526::obj item-type1527::type)
    (inline switch?::bool ::obj)
    (switch-nil::switch)
    (inline switch-item-type::type ::switch)
    (inline switch-item-type-set! ::switch ::type)
    (inline switch-clauses::obj ::switch)
    (inline switch-test::node ::switch)
    (inline switch-test-set! ::switch ::node)
    (inline switch-key::obj ::switch)
    (inline switch-key-set! ::switch ::obj)
    (inline switch-side-effect::obj ::switch)
    (inline switch-side-effect-set! ::switch ::obj)
    (inline switch-type::type ::switch)
    (inline switch-type-set! ::switch ::type)
    (inline switch-loc::obj ::switch))))

;; let-fun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-let-fun::let-fun loc1513::obj type1514::type side-effect1515::obj key1516::obj locals1517::obj body1518::node)
    (inline let-fun?::bool ::obj)
    (let-fun-nil::let-fun)
    (inline let-fun-body::node ::let-fun)
    (inline let-fun-body-set! ::let-fun ::node)
    (inline let-fun-locals::obj ::let-fun)
    (inline let-fun-locals-set! ::let-fun ::obj)
    (inline let-fun-key::obj ::let-fun)
    (inline let-fun-key-set! ::let-fun ::obj)
    (inline let-fun-side-effect::obj ::let-fun)
    (inline let-fun-side-effect-set! ::let-fun ::obj)
    (inline let-fun-type::type ::let-fun)
    (inline let-fun-type-set! ::let-fun ::type)
    (inline let-fun-loc::obj ::let-fun))))

;; let-var
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-let-var::let-var loc1504::obj type1505::type side-effect1506::obj key1507::obj bindings1508::obj body1509::node removable?1510::bool)
    (inline let-var?::bool ::obj)
    (let-var-nil::let-var)
    (inline let-var-removable?::bool ::let-var)
    (inline let-var-removable?-set! ::let-var ::bool)
    (inline let-var-body::node ::let-var)
    (inline let-var-body-set! ::let-var ::node)
    (inline let-var-bindings::obj ::let-var)
    (inline let-var-bindings-set! ::let-var ::obj)
    (inline let-var-key::obj ::let-var)
    (inline let-var-key-set! ::let-var ::obj)
    (inline let-var-side-effect::obj ::let-var)
    (inline let-var-side-effect-set! ::let-var ::obj)
    (inline let-var-type::type ::let-var)
    (inline let-var-type-set! ::let-var ::type)
    (inline let-var-loc::obj ::let-var))))

;; set-ex-it
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-set-ex-it::set-ex-it loc1499::obj type1500::type var1501::var body1502::node)
    (inline set-ex-it?::bool ::obj)
    (set-ex-it-nil::set-ex-it)
    (inline set-ex-it-body::node ::set-ex-it)
    (inline set-ex-it-body-set! ::set-ex-it ::node)
    (inline set-ex-it-var::var ::set-ex-it)
    (inline set-ex-it-var-set! ::set-ex-it ::var)
    (inline set-ex-it-type::type ::set-ex-it)
    (inline set-ex-it-type-set! ::set-ex-it ::type)
    (inline set-ex-it-loc::obj ::set-ex-it))))

;; jump-ex-it
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-jump-ex-it::jump-ex-it loc1493::obj type1494::type exit1495::node value1496::node)
    (inline jump-ex-it?::bool ::obj)
    (jump-ex-it-nil::jump-ex-it)
    (inline jump-ex-it-value::node ::jump-ex-it)
    (inline jump-ex-it-value-set! ::jump-ex-it ::node)
    (inline jump-ex-it-exit::node ::jump-ex-it)
    (inline jump-ex-it-exit-set! ::jump-ex-it ::node)
    (inline jump-ex-it-type::type ::jump-ex-it)
    (inline jump-ex-it-type-set! ::jump-ex-it ::type)
    (inline jump-ex-it-loc::obj ::jump-ex-it))))

;; retblock
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-retblock::retblock loc1489::obj type1490::type body1491::node)
    (inline retblock?::bool ::obj)
    (retblock-nil::retblock)
    (inline retblock-body::node ::retblock)
    (inline retblock-body-set! ::retblock ::node)
    (inline retblock-type::type ::retblock)
    (inline retblock-type-set! ::retblock ::type)
    (inline retblock-loc::obj ::retblock))))

;; return
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-return::return loc1484::obj type1485::type block1486::retblock value1487::node)
    (inline return?::bool ::obj)
    (return-nil::return)
    (inline return-value::node ::return)
    (inline return-value-set! ::return ::node)
    (inline return-block::retblock ::return)
    (inline return-block-set! ::return ::retblock)
    (inline return-type::type ::return)
    (inline return-type-set! ::return ::type)
    (inline return-loc::obj ::return))))

;; make-box
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-make-box::make-box loc1476::obj type1477::type side-effect1478::obj key1479::obj value1480::node vtype1481::type stackable1482::bool)
    (inline make-box?::bool ::obj)
    (make-box-nil::make-box)
    (inline make-box-stackable::bool ::make-box)
    (inline make-box-stackable-set! ::make-box ::bool)
    (inline make-box-vtype::type ::make-box)
    (inline make-box-vtype-set! ::make-box ::type)
    (inline make-box-value::node ::make-box)
    (inline make-box-value-set! ::make-box ::node)
    (inline make-box-key::obj ::make-box)
    (inline make-box-key-set! ::make-box ::obj)
    (inline make-box-side-effect::obj ::make-box)
    (inline make-box-side-effect-set! ::make-box ::obj)
    (inline make-box-type::type ::make-box)
    (inline make-box-type-set! ::make-box ::type)
    (inline make-box-loc::obj ::make-box))))

;; box-ref
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-ref::box-ref loc1469::obj type1470::type side-effect1471::obj key1472::obj var1473::var vtype1474::type)
    (inline box-ref?::bool ::obj)
    (box-ref-nil::box-ref)
    (inline box-ref-vtype::type ::box-ref)
    (inline box-ref-vtype-set! ::box-ref ::type)
    (inline box-ref-var::var ::box-ref)
    (inline box-ref-var-set! ::box-ref ::var)
    (inline box-ref-key::obj ::box-ref)
    (inline box-ref-key-set! ::box-ref ::obj)
    (inline box-ref-side-effect::obj ::box-ref)
    (inline box-ref-side-effect-set! ::box-ref ::obj)
    (inline box-ref-type::type ::box-ref)
    (inline box-ref-type-set! ::box-ref ::type)
    (inline box-ref-loc::obj ::box-ref))))

;; box-set!
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-set!::box-set! loc1463::obj type1464::type var1465::var value1466::node vtype1467::type)
    (inline box-set!?::bool ::obj)
    (box-set!-nil::box-set!)
    (inline box-set!-vtype::type ::box-set!)
    (inline box-set!-vtype-set! ::box-set! ::type)
    (inline box-set!-value::node ::box-set!)
    (inline box-set!-value-set! ::box-set! ::node)
    (inline box-set!-var::var ::box-set!)
    (inline box-set!-var-set! ::box-set! ::var)
    (inline box-set!-type::type ::box-set!)
    (inline box-set!-type-set! ::box-set! ::type)
    (inline box-set!-loc::obj ::box-set!))))

;; sync
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sync::sync loc1456::obj type1457::type mutex1458::node prelock1459::node body1460::node)
    (inline sync?::bool ::obj)
    (sync-nil::sync)
    (inline sync-body::node ::sync)
    (inline sync-body-set! ::sync ::node)
    (inline sync-prelock::node ::sync)
    (inline sync-prelock-set! ::sync ::node)
    (inline sync-mutex::node ::sync)
    (inline sync-mutex-set! ::sync ::node)
    (inline sync-type::type ::sync)
    (inline sync-type-set! ::sync ::type)
    (inline sync-loc::obj ::sync)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; node
(define-inline (make-node::node loc1745::obj type1746::type) (instantiate::node (loc loc1745) (type type1746)))
(define-inline (node?::bool obj::obj) ((@ isa? __object) obj (@ node ast_node)))
(define (node-nil::node) (class-nil (@ node ast_node)))
(define-inline (node-type::type o::node) (-> |#!bigloo_wallow| o type))
(define-inline (node-type-set! o::node v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (node-loc::obj o::node) (-> |#!bigloo_wallow| o loc))
(define-inline (node-loc-set! o::node v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; node/effect
(define-inline (make-node/effect::node/effect loc1740::obj type1741::type side-effect1742::obj key1743::obj) (instantiate::node/effect (loc loc1740) (type type1741) (side-effect side-effect1742) (key key1743)))
(define-inline (node/effect?::bool obj::obj) ((@ isa? __object) obj (@ node/effect ast_node)))
(define (node/effect-nil::node/effect) (class-nil (@ node/effect ast_node)))
(define-inline (node/effect-key::obj o::node/effect) (-> |#!bigloo_wallow| o key))
(define-inline (node/effect-key-set! o::node/effect v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (node/effect-side-effect::obj o::node/effect) (-> |#!bigloo_wallow| o side-effect))
(define-inline (node/effect-side-effect-set! o::node/effect v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (node/effect-type::type o::node/effect) (-> |#!bigloo_wallow| o type))
(define-inline (node/effect-type-set! o::node/effect v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (node/effect-loc::obj o::node/effect) (-> |#!bigloo_wallow| o loc))
(define-inline (node/effect-loc-set! o::node/effect v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; atom
(define-inline (atom?::bool obj::obj) ((@ isa? __object) obj (@ atom ast_node)))
(define (atom-nil::atom) (class-nil (@ atom ast_node)))
(define-inline (atom-value::obj o::atom) (-> |#!bigloo_wallow| o value))
(define-inline (atom-value-set! o::atom v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (atom-type::type o::atom) (-> |#!bigloo_wallow| o type))
(define-inline (atom-type-set! o::atom v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (atom-loc::obj o::atom) (-> |#!bigloo_wallow| o loc))
(define-inline (atom-loc-set! o::atom v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; literal
(define-inline (make-literal::literal loc1735::obj type1736::type value1737::obj) (instantiate::literal (loc loc1735) (type type1736) (value value1737)))
(define-inline (literal?::bool obj::obj) ((@ isa? __object) obj (@ literal ast_node)))
(define (literal-nil::literal) (class-nil (@ literal ast_node)))
(define-inline (literal-value::obj o::literal) (-> |#!bigloo_wallow| o value))
(define-inline (literal-value-set! o::literal v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (literal-type::type o::literal) (-> |#!bigloo_wallow| o type))
(define-inline (literal-type-set! o::literal v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (literal-loc::obj o::literal) (-> |#!bigloo_wallow| o loc))
(define-inline (literal-loc-set! o::literal v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; patch
(define-inline (make-patch::patch loc1728::obj type1729::type value1730::obj ref1731::var index1732::long patchid1733::obj) (instantiate::patch (loc loc1728) (type type1729) (value value1730) (ref ref1731) (index index1732) (patchid patchid1733)))
(define-inline (patch?::bool obj::obj) ((@ isa? __object) obj (@ patch ast_node)))
(define (patch-nil::patch) (class-nil (@ patch ast_node)))
(define-inline (patch-patchid::obj o::patch) (-> |#!bigloo_wallow| o patchid))
(define-inline (patch-patchid-set! o::patch v::obj) (set! (-> |#!bigloo_wallow| o patchid) v))
(define-inline (patch-index::long o::patch) (-> |#!bigloo_wallow| o index))
(define-inline (patch-index-set! o::patch v::long) (set! (-> |#!bigloo_wallow| o index) v))
(define-inline (patch-ref::var o::patch) (-> |#!bigloo_wallow| o ref))
(define-inline (patch-ref-set! o::patch v::var) (set! (-> |#!bigloo_wallow| o ref) v))
(define-inline (patch-value::obj o::patch) (-> |#!bigloo_wallow| o value))
(define-inline (patch-value-set! o::patch v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (patch-type::type o::patch) (-> |#!bigloo_wallow| o type))
(define-inline (patch-type-set! o::patch v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (patch-loc::obj o::patch) (-> |#!bigloo_wallow| o loc))
(define-inline (patch-loc-set! o::patch v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; var
(define-inline (make-var::var loc1724::obj type1725::type variable1726::variable) (instantiate::var (loc loc1724) (type type1725) (variable variable1726)))
(define-inline (var?::bool obj::obj) ((@ isa? __object) obj (@ var ast_node)))
(define (var-nil::var) (class-nil (@ var ast_node)))
(define-inline (var-variable::variable o::var) (-> |#!bigloo_wallow| o variable))
(define-inline (var-variable-set! o::var v::variable) (set! (-> |#!bigloo_wallow| o variable) v))
(define-inline (var-type::type o::var) (-> |#!bigloo_wallow| o type))
(define-inline (var-type-set! o::var v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (var-loc::obj o::var) (-> |#!bigloo_wallow| o loc))
(define-inline (var-loc-set! o::var v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; closure
(define-inline (make-closure::closure loc1720::obj type1721::type variable1722::variable) (instantiate::closure (loc loc1720) (type type1721) (variable variable1722)))
(define-inline (closure?::bool obj::obj) ((@ isa? __object) obj (@ closure ast_node)))
(define (closure-nil::closure) (class-nil (@ closure ast_node)))
(define-inline (closure-variable::variable o::closure) (-> |#!bigloo_wallow| o variable))
(define-inline (closure-variable-set! o::closure v::variable) (set! (-> |#!bigloo_wallow| o variable) v))
(define-inline (closure-type::type o::closure) (-> |#!bigloo_wallow| o type))
(define-inline (closure-type-set! o::closure v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (closure-loc::obj o::closure) (-> |#!bigloo_wallow| o loc))
(define-inline (closure-loc-set! o::closure v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; kwote
(define-inline (make-kwote::kwote loc1716::obj type1717::type value1718::obj) (instantiate::kwote (loc loc1716) (type type1717) (value value1718)))
(define-inline (kwote?::bool obj::obj) ((@ isa? __object) obj (@ kwote ast_node)))
(define (kwote-nil::kwote) (class-nil (@ kwote ast_node)))
(define-inline (kwote-value::obj o::kwote) (-> |#!bigloo_wallow| o value))
(define-inline (kwote-value-set! o::kwote v::obj) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (kwote-type::type o::kwote) (-> |#!bigloo_wallow| o type))
(define-inline (kwote-type-set! o::kwote v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (kwote-loc::obj o::kwote) (-> |#!bigloo_wallow| o loc))
(define-inline (kwote-loc-set! o::kwote v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sequence
(define-inline (make-sequence::sequence loc1708::obj type1709::type side-effect1710::obj key1711::obj nodes1712::pair-nil unsafe1713::bool meta1714::pair-nil) (instantiate::sequence (loc loc1708) (type type1709) (side-effect side-effect1710) (key key1711) (nodes nodes1712) (unsafe unsafe1713) (meta meta1714)))
(define-inline (sequence?::bool obj::obj) ((@ isa? __object) obj (@ sequence ast_node)))
(define (sequence-nil::sequence) (class-nil (@ sequence ast_node)))
(define-inline (sequence-meta::pair-nil o::sequence) (-> |#!bigloo_wallow| o meta))
(define-inline (sequence-meta-set! o::sequence v::pair-nil) (set! (-> |#!bigloo_wallow| o meta) v))
(define-inline (sequence-unsafe::bool o::sequence) (-> |#!bigloo_wallow| o unsafe))
(define-inline (sequence-unsafe-set! o::sequence v::bool) (set! (-> |#!bigloo_wallow| o unsafe) v))
(define-inline (sequence-nodes::pair-nil o::sequence) (-> |#!bigloo_wallow| o nodes))
(define-inline (sequence-nodes-set! o::sequence v::pair-nil) (set! (-> |#!bigloo_wallow| o nodes) v))
(define-inline (sequence-key::obj o::sequence) (-> |#!bigloo_wallow| o key))
(define-inline (sequence-key-set! o::sequence v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (sequence-side-effect::obj o::sequence) (-> |#!bigloo_wallow| o side-effect))
(define-inline (sequence-side-effect-set! o::sequence v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (sequence-type::type o::sequence) (-> |#!bigloo_wallow| o type))
(define-inline (sequence-type-set! o::sequence v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sequence-loc::obj o::sequence) (-> |#!bigloo_wallow| o loc))
(define-inline (sequence-loc-set! o::sequence v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; app
(define-inline (make-app::app loc1700::obj type1701::type side-effect1702::obj key1703::obj fun1704::var args1705::obj stackable1706::obj) (instantiate::app (loc loc1700) (type type1701) (side-effect side-effect1702) (key key1703) (fun fun1704) (args args1705) (stackable stackable1706)))
(define-inline (app?::bool obj::obj) ((@ isa? __object) obj (@ app ast_node)))
(define (app-nil::app) (class-nil (@ app ast_node)))
(define-inline (app-stackable::obj o::app) (-> |#!bigloo_wallow| o stackable))
(define-inline (app-stackable-set! o::app v::obj) (set! (-> |#!bigloo_wallow| o stackable) v))
(define-inline (app-args::obj o::app) (-> |#!bigloo_wallow| o args))
(define-inline (app-args-set! o::app v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (app-fun::var o::app) (-> |#!bigloo_wallow| o fun))
(define-inline (app-fun-set! o::app v::var) (set! (-> |#!bigloo_wallow| o fun) v))
(define-inline (app-key::obj o::app) (-> |#!bigloo_wallow| o key))
(define-inline (app-key-set! o::app v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (app-side-effect::obj o::app) (-> |#!bigloo_wallow| o side-effect))
(define-inline (app-side-effect-set! o::app v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (app-type::type o::app) (-> |#!bigloo_wallow| o type))
(define-inline (app-type-set! o::app v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (app-loc::obj o::app) (-> |#!bigloo_wallow| o loc))
(define-inline (app-loc-set! o::app v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; app-ly
(define-inline (make-app-ly::app-ly loc1695::obj type1696::type fun1697::node arg1698::node) (instantiate::app-ly (loc loc1695) (type type1696) (fun fun1697) (arg arg1698)))
(define-inline (app-ly?::bool obj::obj) ((@ isa? __object) obj (@ app-ly ast_node)))
(define (app-ly-nil::app-ly) (class-nil (@ app-ly ast_node)))
(define-inline (app-ly-arg::node o::app-ly) (-> |#!bigloo_wallow| o arg))
(define-inline (app-ly-arg-set! o::app-ly v::node) (set! (-> |#!bigloo_wallow| o arg) v))
(define-inline (app-ly-fun::node o::app-ly) (-> |#!bigloo_wallow| o fun))
(define-inline (app-ly-fun-set! o::app-ly v::node) (set! (-> |#!bigloo_wallow| o fun) v))
(define-inline (app-ly-type::type o::app-ly) (-> |#!bigloo_wallow| o type))
(define-inline (app-ly-type-set! o::app-ly v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (app-ly-loc::obj o::app-ly) (-> |#!bigloo_wallow| o loc))
(define-inline (app-ly-loc-set! o::app-ly v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; funcall
(define-inline (make-funcall::funcall loc1688::obj type1689::type fun1690::node args1691::obj strength1692::symbol functions1693::obj) (instantiate::funcall (loc loc1688) (type type1689) (fun fun1690) (args args1691) (strength strength1692) (functions functions1693)))
(define-inline (funcall?::bool obj::obj) ((@ isa? __object) obj (@ funcall ast_node)))
(define (funcall-nil::funcall) (class-nil (@ funcall ast_node)))
(define-inline (funcall-functions::obj o::funcall) (-> |#!bigloo_wallow| o functions))
(define-inline (funcall-functions-set! o::funcall v::obj) (set! (-> |#!bigloo_wallow| o functions) v))
(define-inline (funcall-strength::symbol o::funcall) (-> |#!bigloo_wallow| o strength))
(define-inline (funcall-strength-set! o::funcall v::symbol) (set! (-> |#!bigloo_wallow| o strength) v))
(define-inline (funcall-args::obj o::funcall) (-> |#!bigloo_wallow| o args))
(define-inline (funcall-args-set! o::funcall v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (funcall-fun::node o::funcall) (-> |#!bigloo_wallow| o fun))
(define-inline (funcall-fun-set! o::funcall v::node) (set! (-> |#!bigloo_wallow| o fun) v))
(define-inline (funcall-type::type o::funcall) (-> |#!bigloo_wallow| o type))
(define-inline (funcall-type-set! o::funcall v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (funcall-loc::obj o::funcall) (-> |#!bigloo_wallow| o loc))
(define-inline (funcall-loc-set! o::funcall v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; extern
(define-inline (make-extern::extern loc1681::obj type1682::type side-effect1683::obj key1684::obj expr*1685::pair-nil effect1686::obj) (instantiate::extern (loc loc1681) (type type1682) (side-effect side-effect1683) (key key1684) (expr* expr*1685) (effect effect1686)))
(define-inline (extern?::bool obj::obj) ((@ isa? __object) obj (@ extern ast_node)))
(define (extern-nil::extern) (class-nil (@ extern ast_node)))
(define-inline (extern-effect::obj o::extern) (-> |#!bigloo_wallow| o effect))
(define-inline (extern-effect-set! o::extern v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (extern-expr*::pair-nil o::extern) (-> |#!bigloo_wallow| o expr*))
(define-inline (extern-expr*-set! o::extern v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (extern-key::obj o::extern) (-> |#!bigloo_wallow| o key))
(define-inline (extern-key-set! o::extern v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (extern-side-effect::obj o::extern) (-> |#!bigloo_wallow| o side-effect))
(define-inline (extern-side-effect-set! o::extern v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (extern-type::type o::extern) (-> |#!bigloo_wallow| o type))
(define-inline (extern-type-set! o::extern v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (extern-loc::obj o::extern) (-> |#!bigloo_wallow| o loc))
(define-inline (extern-loc-set! o::extern v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; pragma
(define-inline (make-pragma::pragma loc1673::obj type1674::type side-effect1675::obj key1676::obj expr*1677::pair-nil effect1678::obj format1679::bstring) (instantiate::pragma (loc loc1673) (type type1674) (side-effect side-effect1675) (key key1676) (expr* expr*1677) (effect effect1678) (format format1679)))
(define-inline (pragma?::bool obj::obj) ((@ isa? __object) obj (@ pragma ast_node)))
(define (pragma-nil::pragma) (class-nil (@ pragma ast_node)))
(define-inline (pragma-format::bstring o::pragma) (-> |#!bigloo_wallow| o format))
(define-inline (pragma-format-set! o::pragma v::bstring) (set! (-> |#!bigloo_wallow| o format) v))
(define-inline (pragma-effect::obj o::pragma) (-> |#!bigloo_wallow| o effect))
(define-inline (pragma-effect-set! o::pragma v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (pragma-expr*::pair-nil o::pragma) (-> |#!bigloo_wallow| o expr*))
(define-inline (pragma-expr*-set! o::pragma v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (pragma-key::obj o::pragma) (-> |#!bigloo_wallow| o key))
(define-inline (pragma-key-set! o::pragma v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (pragma-side-effect::obj o::pragma) (-> |#!bigloo_wallow| o side-effect))
(define-inline (pragma-side-effect-set! o::pragma v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (pragma-type::type o::pragma) (-> |#!bigloo_wallow| o type))
(define-inline (pragma-type-set! o::pragma v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (pragma-loc::obj o::pragma) (-> |#!bigloo_wallow| o loc))
(define-inline (pragma-loc-set! o::pragma v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; genpatchid
(define-inline (make-genpatchid::genpatchid loc1664::obj type1665::type side-effect1666::obj key1667::obj expr*1668::pair-nil effect1669::obj index1670::long rindex1671::long) (instantiate::genpatchid (loc loc1664) (type type1665) (side-effect side-effect1666) (key key1667) (expr* expr*1668) (effect effect1669) (index index1670) (rindex rindex1671)))
(define-inline (genpatchid?::bool obj::obj) ((@ isa? __object) obj (@ genpatchid ast_node)))
(define (genpatchid-nil::genpatchid) (class-nil (@ genpatchid ast_node)))
(define-inline (genpatchid-rindex::long o::genpatchid) (-> |#!bigloo_wallow| o rindex))
(define-inline (genpatchid-rindex-set! o::genpatchid v::long) (set! (-> |#!bigloo_wallow| o rindex) v))
(define-inline (genpatchid-index::long o::genpatchid) (-> |#!bigloo_wallow| o index))
(define-inline (genpatchid-index-set! o::genpatchid v::long) (set! (-> |#!bigloo_wallow| o index) v))
(define-inline (genpatchid-effect::obj o::genpatchid) (-> |#!bigloo_wallow| o effect))
(define-inline (genpatchid-effect-set! o::genpatchid v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (genpatchid-expr*::pair-nil o::genpatchid) (-> |#!bigloo_wallow| o expr*))
(define-inline (genpatchid-expr*-set! o::genpatchid v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (genpatchid-key::obj o::genpatchid) (-> |#!bigloo_wallow| o key))
(define-inline (genpatchid-key-set! o::genpatchid v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (genpatchid-side-effect::obj o::genpatchid) (-> |#!bigloo_wallow| o side-effect))
(define-inline (genpatchid-side-effect-set! o::genpatchid v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (genpatchid-type::type o::genpatchid) (-> |#!bigloo_wallow| o type))
(define-inline (genpatchid-type-set! o::genpatchid v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (genpatchid-loc::obj o::genpatchid) (-> |#!bigloo_wallow| o loc))
(define-inline (genpatchid-loc-set! o::genpatchid v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; private
(define-inline (make-private::private loc1656::obj type1657::type side-effect1658::obj key1659::obj expr*1660::pair-nil effect1661::obj c-format1662::bstring) (instantiate::private (loc loc1656) (type type1657) (side-effect side-effect1658) (key key1659) (expr* expr*1660) (effect effect1661) (c-format c-format1662)))
(define-inline (private?::bool obj::obj) ((@ isa? __object) obj (@ private ast_node)))
(define (private-nil::private) (class-nil (@ private ast_node)))
(define-inline (private-c-format::bstring o::private) (-> |#!bigloo_wallow| o c-format))
(define-inline (private-c-format-set! o::private v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (private-effect::obj o::private) (-> |#!bigloo_wallow| o effect))
(define-inline (private-effect-set! o::private v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (private-expr*::pair-nil o::private) (-> |#!bigloo_wallow| o expr*))
(define-inline (private-expr*-set! o::private v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (private-key::obj o::private) (-> |#!bigloo_wallow| o key))
(define-inline (private-key-set! o::private v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (private-side-effect::obj o::private) (-> |#!bigloo_wallow| o side-effect))
(define-inline (private-side-effect-set! o::private v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (private-type::type o::private) (-> |#!bigloo_wallow| o type))
(define-inline (private-type-set! o::private v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (private-loc::obj o::private) (-> |#!bigloo_wallow| o loc))
(define-inline (private-loc-set! o::private v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; getfield
(define-inline (make-getfield::getfield loc1645::obj type1646::type side-effect1647::obj key1648::obj expr*1649::pair-nil effect1650::obj c-format1651::bstring fname1652::bstring ftype1653::type otype1654::type) (instantiate::getfield (loc loc1645) (type type1646) (side-effect side-effect1647) (key key1648) (expr* expr*1649) (effect effect1650) (c-format c-format1651) (fname fname1652) (ftype ftype1653) (otype otype1654)))
(define-inline (getfield?::bool obj::obj) ((@ isa? __object) obj (@ getfield ast_node)))
(define (getfield-nil::getfield) (class-nil (@ getfield ast_node)))
(define-inline (getfield-otype::type o::getfield) (-> |#!bigloo_wallow| o otype))
(define-inline (getfield-otype-set! o::getfield v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (getfield-ftype::type o::getfield) (-> |#!bigloo_wallow| o ftype))
(define-inline (getfield-ftype-set! o::getfield v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (getfield-fname::bstring o::getfield) (-> |#!bigloo_wallow| o fname))
(define-inline (getfield-fname-set! o::getfield v::bstring) (set! (-> |#!bigloo_wallow| o fname) v))
(define-inline (getfield-c-format::bstring o::getfield) (-> |#!bigloo_wallow| o c-format))
(define-inline (getfield-c-format-set! o::getfield v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (getfield-effect::obj o::getfield) (-> |#!bigloo_wallow| o effect))
(define-inline (getfield-effect-set! o::getfield v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (getfield-expr*::pair-nil o::getfield) (-> |#!bigloo_wallow| o expr*))
(define-inline (getfield-expr*-set! o::getfield v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (getfield-key::obj o::getfield) (-> |#!bigloo_wallow| o key))
(define-inline (getfield-key-set! o::getfield v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (getfield-side-effect::obj o::getfield) (-> |#!bigloo_wallow| o side-effect))
(define-inline (getfield-side-effect-set! o::getfield v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (getfield-type::type o::getfield) (-> |#!bigloo_wallow| o type))
(define-inline (getfield-type-set! o::getfield v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (getfield-loc::obj o::getfield) (-> |#!bigloo_wallow| o loc))
(define-inline (getfield-loc-set! o::getfield v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; setfield
(define-inline (make-setfield::setfield loc1634::obj type1635::type side-effect1636::obj key1637::obj expr*1638::pair-nil effect1639::obj c-format1640::bstring fname1641::bstring ftype1642::type otype1643::type) (instantiate::setfield (loc loc1634) (type type1635) (side-effect side-effect1636) (key key1637) (expr* expr*1638) (effect effect1639) (c-format c-format1640) (fname fname1641) (ftype ftype1642) (otype otype1643)))
(define-inline (setfield?::bool obj::obj) ((@ isa? __object) obj (@ setfield ast_node)))
(define (setfield-nil::setfield) (class-nil (@ setfield ast_node)))
(define-inline (setfield-otype::type o::setfield) (-> |#!bigloo_wallow| o otype))
(define-inline (setfield-otype-set! o::setfield v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (setfield-ftype::type o::setfield) (-> |#!bigloo_wallow| o ftype))
(define-inline (setfield-ftype-set! o::setfield v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (setfield-fname::bstring o::setfield) (-> |#!bigloo_wallow| o fname))
(define-inline (setfield-fname-set! o::setfield v::bstring) (set! (-> |#!bigloo_wallow| o fname) v))
(define-inline (setfield-c-format::bstring o::setfield) (-> |#!bigloo_wallow| o c-format))
(define-inline (setfield-c-format-set! o::setfield v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (setfield-effect::obj o::setfield) (-> |#!bigloo_wallow| o effect))
(define-inline (setfield-effect-set! o::setfield v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (setfield-expr*::pair-nil o::setfield) (-> |#!bigloo_wallow| o expr*))
(define-inline (setfield-expr*-set! o::setfield v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (setfield-key::obj o::setfield) (-> |#!bigloo_wallow| o key))
(define-inline (setfield-key-set! o::setfield v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (setfield-side-effect::obj o::setfield) (-> |#!bigloo_wallow| o side-effect))
(define-inline (setfield-side-effect-set! o::setfield v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (setfield-type::type o::setfield) (-> |#!bigloo_wallow| o type))
(define-inline (setfield-type-set! o::setfield v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (setfield-loc::obj o::setfield) (-> |#!bigloo_wallow| o loc))
(define-inline (setfield-loc-set! o::setfield v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; widening
(define-inline (make-widening::widening loc1625::obj type1626::type side-effect1627::obj key1628::obj expr*1629::pair-nil effect1630::obj c-format1631::bstring otype1632::type) (instantiate::widening (loc loc1625) (type type1626) (side-effect side-effect1627) (key key1628) (expr* expr*1629) (effect effect1630) (c-format c-format1631) (otype otype1632)))
(define-inline (widening?::bool obj::obj) ((@ isa? __object) obj (@ widening ast_node)))
(define (widening-nil::widening) (class-nil (@ widening ast_node)))
(define-inline (widening-otype::type o::widening) (-> |#!bigloo_wallow| o otype))
(define-inline (widening-otype-set! o::widening v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (widening-c-format::bstring o::widening) (-> |#!bigloo_wallow| o c-format))
(define-inline (widening-c-format-set! o::widening v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (widening-effect::obj o::widening) (-> |#!bigloo_wallow| o effect))
(define-inline (widening-effect-set! o::widening v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (widening-expr*::pair-nil o::widening) (-> |#!bigloo_wallow| o expr*))
(define-inline (widening-expr*-set! o::widening v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (widening-key::obj o::widening) (-> |#!bigloo_wallow| o key))
(define-inline (widening-key-set! o::widening v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (widening-side-effect::obj o::widening) (-> |#!bigloo_wallow| o side-effect))
(define-inline (widening-side-effect-set! o::widening v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (widening-type::type o::widening) (-> |#!bigloo_wallow| o type))
(define-inline (widening-type-set! o::widening v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (widening-loc::obj o::widening) (-> |#!bigloo_wallow| o loc))
(define-inline (widening-loc-set! o::widening v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; new
(define-inline (make-new::new loc1616::obj type1617::type side-effect1618::obj key1619::obj expr*1620::pair-nil effect1621::obj c-format1622::bstring args-type1623::pair-nil) (instantiate::new (loc loc1616) (type type1617) (side-effect side-effect1618) (key key1619) (expr* expr*1620) (effect effect1621) (c-format c-format1622) (args-type args-type1623)))
(define-inline (new?::bool obj::obj) ((@ isa? __object) obj (@ new ast_node)))
(define (new-nil::new) (class-nil (@ new ast_node)))
(define-inline (new-args-type::pair-nil o::new) (-> |#!bigloo_wallow| o args-type))
(define-inline (new-args-type-set! o::new v::pair-nil) (set! (-> |#!bigloo_wallow| o args-type) v))
(define-inline (new-c-format::bstring o::new) (-> |#!bigloo_wallow| o c-format))
(define-inline (new-c-format-set! o::new v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (new-effect::obj o::new) (-> |#!bigloo_wallow| o effect))
(define-inline (new-effect-set! o::new v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (new-expr*::pair-nil o::new) (-> |#!bigloo_wallow| o expr*))
(define-inline (new-expr*-set! o::new v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (new-key::obj o::new) (-> |#!bigloo_wallow| o key))
(define-inline (new-key-set! o::new v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (new-side-effect::obj o::new) (-> |#!bigloo_wallow| o side-effect))
(define-inline (new-side-effect-set! o::new v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (new-type::type o::new) (-> |#!bigloo_wallow| o type))
(define-inline (new-type-set! o::new v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (new-loc::obj o::new) (-> |#!bigloo_wallow| o loc))
(define-inline (new-loc-set! o::new v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; valloc
(define-inline (make-valloc::valloc loc1606::obj type1607::type side-effect1608::obj key1609::obj expr*1610::pair-nil effect1611::obj c-format1612::bstring ftype1613::type otype1614::type) (instantiate::valloc (loc loc1606) (type type1607) (side-effect side-effect1608) (key key1609) (expr* expr*1610) (effect effect1611) (c-format c-format1612) (ftype ftype1613) (otype otype1614)))
(define-inline (valloc?::bool obj::obj) ((@ isa? __object) obj (@ valloc ast_node)))
(define (valloc-nil::valloc) (class-nil (@ valloc ast_node)))
(define-inline (valloc-otype::type o::valloc) (-> |#!bigloo_wallow| o otype))
(define-inline (valloc-otype-set! o::valloc v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (valloc-ftype::type o::valloc) (-> |#!bigloo_wallow| o ftype))
(define-inline (valloc-ftype-set! o::valloc v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (valloc-c-format::bstring o::valloc) (-> |#!bigloo_wallow| o c-format))
(define-inline (valloc-c-format-set! o::valloc v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (valloc-effect::obj o::valloc) (-> |#!bigloo_wallow| o effect))
(define-inline (valloc-effect-set! o::valloc v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (valloc-expr*::pair-nil o::valloc) (-> |#!bigloo_wallow| o expr*))
(define-inline (valloc-expr*-set! o::valloc v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (valloc-key::obj o::valloc) (-> |#!bigloo_wallow| o key))
(define-inline (valloc-key-set! o::valloc v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (valloc-side-effect::obj o::valloc) (-> |#!bigloo_wallow| o side-effect))
(define-inline (valloc-side-effect-set! o::valloc v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (valloc-type::type o::valloc) (-> |#!bigloo_wallow| o type))
(define-inline (valloc-type-set! o::valloc v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (valloc-loc::obj o::valloc) (-> |#!bigloo_wallow| o loc))
(define-inline (valloc-loc-set! o::valloc v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; vref
(define-inline (make-vref::vref loc1594::obj type1595::type side-effect1596::obj key1597::obj expr*1598::pair-nil effect1599::obj c-format1600::bstring ftype1601::type otype1602::type vtype1603::type unsafe1604::bool) (instantiate::vref (loc loc1594) (type type1595) (side-effect side-effect1596) (key key1597) (expr* expr*1598) (effect effect1599) (c-format c-format1600) (ftype ftype1601) (otype otype1602) (vtype vtype1603) (unsafe unsafe1604)))
(define-inline (vref?::bool obj::obj) ((@ isa? __object) obj (@ vref ast_node)))
(define (vref-nil::vref) (class-nil (@ vref ast_node)))
(define-inline (vref-unsafe::bool o::vref) (-> |#!bigloo_wallow| o unsafe))
(define-inline (vref-unsafe-set! o::vref v::bool) (set! (-> |#!bigloo_wallow| o unsafe) v))
(define-inline (vref-vtype::type o::vref) (-> |#!bigloo_wallow| o vtype))
(define-inline (vref-vtype-set! o::vref v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (vref-otype::type o::vref) (-> |#!bigloo_wallow| o otype))
(define-inline (vref-otype-set! o::vref v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (vref-ftype::type o::vref) (-> |#!bigloo_wallow| o ftype))
(define-inline (vref-ftype-set! o::vref v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (vref-c-format::bstring o::vref) (-> |#!bigloo_wallow| o c-format))
(define-inline (vref-c-format-set! o::vref v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (vref-effect::obj o::vref) (-> |#!bigloo_wallow| o effect))
(define-inline (vref-effect-set! o::vref v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (vref-expr*::pair-nil o::vref) (-> |#!bigloo_wallow| o expr*))
(define-inline (vref-expr*-set! o::vref v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (vref-key::obj o::vref) (-> |#!bigloo_wallow| o key))
(define-inline (vref-key-set! o::vref v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (vref-side-effect::obj o::vref) (-> |#!bigloo_wallow| o side-effect))
(define-inline (vref-side-effect-set! o::vref v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (vref-type::type o::vref) (-> |#!bigloo_wallow| o type))
(define-inline (vref-type-set! o::vref v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (vref-loc::obj o::vref) (-> |#!bigloo_wallow| o loc))
(define-inline (vref-loc-set! o::vref v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; vset!
(define-inline (make-vset!::vset! loc1582::obj type1583::type side-effect1584::obj key1585::obj expr*1586::pair-nil effect1587::obj c-format1588::bstring ftype1589::type otype1590::type vtype1591::type unsafe1592::bool) (instantiate::vset! (loc loc1582) (type type1583) (side-effect side-effect1584) (key key1585) (expr* expr*1586) (effect effect1587) (c-format c-format1588) (ftype ftype1589) (otype otype1590) (vtype vtype1591) (unsafe unsafe1592)))
(define-inline (vset!?::bool obj::obj) ((@ isa? __object) obj (@ vset! ast_node)))
(define (vset!-nil::vset!) (class-nil (@ vset! ast_node)))
(define-inline (vset!-unsafe::bool o::vset!) (-> |#!bigloo_wallow| o unsafe))
(define-inline (vset!-unsafe-set! o::vset! v::bool) (set! (-> |#!bigloo_wallow| o unsafe) v))
(define-inline (vset!-vtype::type o::vset!) (-> |#!bigloo_wallow| o vtype))
(define-inline (vset!-vtype-set! o::vset! v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (vset!-otype::type o::vset!) (-> |#!bigloo_wallow| o otype))
(define-inline (vset!-otype-set! o::vset! v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (vset!-ftype::type o::vset!) (-> |#!bigloo_wallow| o ftype))
(define-inline (vset!-ftype-set! o::vset! v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (vset!-c-format::bstring o::vset!) (-> |#!bigloo_wallow| o c-format))
(define-inline (vset!-c-format-set! o::vset! v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (vset!-effect::obj o::vset!) (-> |#!bigloo_wallow| o effect))
(define-inline (vset!-effect-set! o::vset! v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (vset!-expr*::pair-nil o::vset!) (-> |#!bigloo_wallow| o expr*))
(define-inline (vset!-expr*-set! o::vset! v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (vset!-key::obj o::vset!) (-> |#!bigloo_wallow| o key))
(define-inline (vset!-key-set! o::vset! v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (vset!-side-effect::obj o::vset!) (-> |#!bigloo_wallow| o side-effect))
(define-inline (vset!-side-effect-set! o::vset! v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (vset!-type::type o::vset!) (-> |#!bigloo_wallow| o type))
(define-inline (vset!-type-set! o::vset! v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (vset!-loc::obj o::vset!) (-> |#!bigloo_wallow| o loc))
(define-inline (vset!-loc-set! o::vset! v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; vlength
(define-inline (make-vlength::vlength loc1572::obj type1573::type side-effect1574::obj key1575::obj expr*1576::pair-nil effect1577::obj c-format1578::bstring vtype1579::type ftype1580::obj) (instantiate::vlength (loc loc1572) (type type1573) (side-effect side-effect1574) (key key1575) (expr* expr*1576) (effect effect1577) (c-format c-format1578) (vtype vtype1579) (ftype ftype1580)))
(define-inline (vlength?::bool obj::obj) ((@ isa? __object) obj (@ vlength ast_node)))
(define (vlength-nil::vlength) (class-nil (@ vlength ast_node)))
(define-inline (vlength-ftype::obj o::vlength) (-> |#!bigloo_wallow| o ftype))
(define-inline (vlength-ftype-set! o::vlength v::obj) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (vlength-vtype::type o::vlength) (-> |#!bigloo_wallow| o vtype))
(define-inline (vlength-vtype-set! o::vlength v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (vlength-c-format::bstring o::vlength) (-> |#!bigloo_wallow| o c-format))
(define-inline (vlength-c-format-set! o::vlength v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (vlength-effect::obj o::vlength) (-> |#!bigloo_wallow| o effect))
(define-inline (vlength-effect-set! o::vlength v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (vlength-expr*::pair-nil o::vlength) (-> |#!bigloo_wallow| o expr*))
(define-inline (vlength-expr*-set! o::vlength v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (vlength-key::obj o::vlength) (-> |#!bigloo_wallow| o key))
(define-inline (vlength-key-set! o::vlength v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (vlength-side-effect::obj o::vlength) (-> |#!bigloo_wallow| o side-effect))
(define-inline (vlength-side-effect-set! o::vlength v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (vlength-type::type o::vlength) (-> |#!bigloo_wallow| o type))
(define-inline (vlength-type-set! o::vlength v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (vlength-loc::obj o::vlength) (-> |#!bigloo_wallow| o loc))
(define-inline (vlength-loc-set! o::vlength v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; instanceof
(define-inline (make-instanceof::instanceof loc1563::obj type1564::type side-effect1565::obj key1566::obj expr*1567::pair-nil effect1568::obj c-format1569::bstring class1570::type) (instantiate::instanceof (loc loc1563) (type type1564) (side-effect side-effect1565) (key key1566) (expr* expr*1567) (effect effect1568) (c-format c-format1569) (class class1570)))
(define-inline (instanceof?::bool obj::obj) ((@ isa? __object) obj (@ instanceof ast_node)))
(define (instanceof-nil::instanceof) (class-nil (@ instanceof ast_node)))
(define-inline (instanceof-class::type o::instanceof) (-> |#!bigloo_wallow| o class))
(define-inline (instanceof-class-set! o::instanceof v::type) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (instanceof-c-format::bstring o::instanceof) (-> |#!bigloo_wallow| o c-format))
(define-inline (instanceof-c-format-set! o::instanceof v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (instanceof-effect::obj o::instanceof) (-> |#!bigloo_wallow| o effect))
(define-inline (instanceof-effect-set! o::instanceof v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (instanceof-expr*::pair-nil o::instanceof) (-> |#!bigloo_wallow| o expr*))
(define-inline (instanceof-expr*-set! o::instanceof v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (instanceof-key::obj o::instanceof) (-> |#!bigloo_wallow| o key))
(define-inline (instanceof-key-set! o::instanceof v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (instanceof-side-effect::obj o::instanceof) (-> |#!bigloo_wallow| o side-effect))
(define-inline (instanceof-side-effect-set! o::instanceof v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (instanceof-type::type o::instanceof) (-> |#!bigloo_wallow| o type))
(define-inline (instanceof-type-set! o::instanceof v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (instanceof-loc::obj o::instanceof) (-> |#!bigloo_wallow| o loc))
(define-inline (instanceof-loc-set! o::instanceof v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; cast-null
(define-inline (make-cast-null::cast-null loc1555::obj type1556::type side-effect1557::obj key1558::obj expr*1559::pair-nil effect1560::obj c-format1561::bstring) (instantiate::cast-null (loc loc1555) (type type1556) (side-effect side-effect1557) (key key1558) (expr* expr*1559) (effect effect1560) (c-format c-format1561)))
(define-inline (cast-null?::bool obj::obj) ((@ isa? __object) obj (@ cast-null ast_node)))
(define (cast-null-nil::cast-null) (class-nil (@ cast-null ast_node)))
(define-inline (cast-null-c-format::bstring o::cast-null) (-> |#!bigloo_wallow| o c-format))
(define-inline (cast-null-c-format-set! o::cast-null v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (cast-null-effect::obj o::cast-null) (-> |#!bigloo_wallow| o effect))
(define-inline (cast-null-effect-set! o::cast-null v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (cast-null-expr*::pair-nil o::cast-null) (-> |#!bigloo_wallow| o expr*))
(define-inline (cast-null-expr*-set! o::cast-null v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (cast-null-key::obj o::cast-null) (-> |#!bigloo_wallow| o key))
(define-inline (cast-null-key-set! o::cast-null v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (cast-null-side-effect::obj o::cast-null) (-> |#!bigloo_wallow| o side-effect))
(define-inline (cast-null-side-effect-set! o::cast-null v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (cast-null-type::type o::cast-null) (-> |#!bigloo_wallow| o type))
(define-inline (cast-null-type-set! o::cast-null v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (cast-null-loc::obj o::cast-null) (-> |#!bigloo_wallow| o loc))
(define-inline (cast-null-loc-set! o::cast-null v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; cast
(define-inline (make-cast::cast loc1548::obj type1549::type arg1553::node) (instantiate::cast (loc loc1548) (type type1549) (arg arg1553)))
(define-inline (cast?::bool obj::obj) ((@ isa? __object) obj (@ cast ast_node)))
(define (cast-nil::cast) (class-nil (@ cast ast_node)))
(define-inline (cast-arg::node o::cast) (-> |#!bigloo_wallow| o arg))
(define-inline (cast-arg-set! o::cast v::node) (set! (-> |#!bigloo_wallow| o arg) v))
(define-inline (cast-type::type o::cast) (-> |#!bigloo_wallow| o type))
(define-inline (cast-type-set! o::cast v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (cast-loc::obj o::cast) (-> |#!bigloo_wallow| o loc))
(define-inline (cast-loc-set! o::cast v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; setq
(define-inline (make-setq::setq loc1543::obj type1544::type var1545::var value1546::node) (instantiate::setq (loc loc1543) (type type1544) (var var1545) (value value1546)))
(define-inline (setq?::bool obj::obj) ((@ isa? __object) obj (@ setq ast_node)))
(define (setq-nil::setq) (class-nil (@ setq ast_node)))
(define-inline (setq-value::node o::setq) (-> |#!bigloo_wallow| o value))
(define-inline (setq-value-set! o::setq v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (setq-var::var o::setq) (-> |#!bigloo_wallow| o var))
(define-inline (setq-var-set! o::setq v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (setq-type::type o::setq) (-> |#!bigloo_wallow| o type))
(define-inline (setq-type-set! o::setq v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (setq-loc::obj o::setq) (-> |#!bigloo_wallow| o loc))
(define-inline (setq-loc-set! o::setq v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; conditional
(define-inline (make-conditional::conditional loc1535::obj type1536::type side-effect1537::obj key1538::obj test1539::node true1540::node false1541::node) (instantiate::conditional (loc loc1535) (type type1536) (side-effect side-effect1537) (key key1538) (test test1539) (true true1540) (false false1541)))
(define-inline (conditional?::bool obj::obj) ((@ isa? __object) obj (@ conditional ast_node)))
(define (conditional-nil::conditional) (class-nil (@ conditional ast_node)))
(define-inline (conditional-false::node o::conditional) (-> |#!bigloo_wallow| o false))
(define-inline (conditional-false-set! o::conditional v::node) (set! (-> |#!bigloo_wallow| o false) v))
(define-inline (conditional-true::node o::conditional) (-> |#!bigloo_wallow| o true))
(define-inline (conditional-true-set! o::conditional v::node) (set! (-> |#!bigloo_wallow| o true) v))
(define-inline (conditional-test::node o::conditional) (-> |#!bigloo_wallow| o test))
(define-inline (conditional-test-set! o::conditional v::node) (set! (-> |#!bigloo_wallow| o test) v))
(define-inline (conditional-key::obj o::conditional) (-> |#!bigloo_wallow| o key))
(define-inline (conditional-key-set! o::conditional v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (conditional-side-effect::obj o::conditional) (-> |#!bigloo_wallow| o side-effect))
(define-inline (conditional-side-effect-set! o::conditional v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (conditional-type::type o::conditional) (-> |#!bigloo_wallow| o type))
(define-inline (conditional-type-set! o::conditional v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (conditional-loc::obj o::conditional) (-> |#!bigloo_wallow| o loc))
(define-inline (conditional-loc-set! o::conditional v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; fail
(define-inline (make-fail::fail loc1529::obj type1530::type proc1531::node msg1532::node obj1533::node) (instantiate::fail (loc loc1529) (type type1530) (proc proc1531) (msg msg1532) (obj obj1533)))
(define-inline (fail?::bool obj::obj) ((@ isa? __object) obj (@ fail ast_node)))
(define (fail-nil::fail) (class-nil (@ fail ast_node)))
(define-inline (fail-obj::node o::fail) (-> |#!bigloo_wallow| o obj))
(define-inline (fail-obj-set! o::fail v::node) (set! (-> |#!bigloo_wallow| o obj) v))
(define-inline (fail-msg::node o::fail) (-> |#!bigloo_wallow| o msg))
(define-inline (fail-msg-set! o::fail v::node) (set! (-> |#!bigloo_wallow| o msg) v))
(define-inline (fail-proc::node o::fail) (-> |#!bigloo_wallow| o proc))
(define-inline (fail-proc-set! o::fail v::node) (set! (-> |#!bigloo_wallow| o proc) v))
(define-inline (fail-type::type o::fail) (-> |#!bigloo_wallow| o type))
(define-inline (fail-type-set! o::fail v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (fail-loc::obj o::fail) (-> |#!bigloo_wallow| o loc))
(define-inline (fail-loc-set! o::fail v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; switch
(define-inline (make-switch::switch loc1521::obj type1522::type side-effect1523::obj key1524::obj test1525::node clauses1526::obj item-type1527::type) (instantiate::switch (loc loc1521) (type type1522) (side-effect side-effect1523) (key key1524) (test test1525) (clauses clauses1526) (item-type item-type1527)))
(define-inline (switch?::bool obj::obj) ((@ isa? __object) obj (@ switch ast_node)))
(define (switch-nil::switch) (class-nil (@ switch ast_node)))
(define-inline (switch-item-type::type o::switch) (-> |#!bigloo_wallow| o item-type))
(define-inline (switch-item-type-set! o::switch v::type) (set! (-> |#!bigloo_wallow| o item-type) v))
(define-inline (switch-clauses::obj o::switch) (-> |#!bigloo_wallow| o clauses))
(define-inline (switch-clauses-set! o::switch v::obj) (set! (-> |#!bigloo_wallow| o clauses) v))
(define-inline (switch-test::node o::switch) (-> |#!bigloo_wallow| o test))
(define-inline (switch-test-set! o::switch v::node) (set! (-> |#!bigloo_wallow| o test) v))
(define-inline (switch-key::obj o::switch) (-> |#!bigloo_wallow| o key))
(define-inline (switch-key-set! o::switch v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (switch-side-effect::obj o::switch) (-> |#!bigloo_wallow| o side-effect))
(define-inline (switch-side-effect-set! o::switch v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (switch-type::type o::switch) (-> |#!bigloo_wallow| o type))
(define-inline (switch-type-set! o::switch v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (switch-loc::obj o::switch) (-> |#!bigloo_wallow| o loc))
(define-inline (switch-loc-set! o::switch v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; let-fun
(define-inline (make-let-fun::let-fun loc1513::obj type1514::type side-effect1515::obj key1516::obj locals1517::obj body1518::node) (instantiate::let-fun (loc loc1513) (type type1514) (side-effect side-effect1515) (key key1516) (locals locals1517) (body body1518)))
(define-inline (let-fun?::bool obj::obj) ((@ isa? __object) obj (@ let-fun ast_node)))
(define (let-fun-nil::let-fun) (class-nil (@ let-fun ast_node)))
(define-inline (let-fun-body::node o::let-fun) (-> |#!bigloo_wallow| o body))
(define-inline (let-fun-body-set! o::let-fun v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (let-fun-locals::obj o::let-fun) (-> |#!bigloo_wallow| o locals))
(define-inline (let-fun-locals-set! o::let-fun v::obj) (set! (-> |#!bigloo_wallow| o locals) v))
(define-inline (let-fun-key::obj o::let-fun) (-> |#!bigloo_wallow| o key))
(define-inline (let-fun-key-set! o::let-fun v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (let-fun-side-effect::obj o::let-fun) (-> |#!bigloo_wallow| o side-effect))
(define-inline (let-fun-side-effect-set! o::let-fun v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (let-fun-type::type o::let-fun) (-> |#!bigloo_wallow| o type))
(define-inline (let-fun-type-set! o::let-fun v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (let-fun-loc::obj o::let-fun) (-> |#!bigloo_wallow| o loc))
(define-inline (let-fun-loc-set! o::let-fun v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; let-var
(define-inline (make-let-var::let-var loc1504::obj type1505::type side-effect1506::obj key1507::obj bindings1508::obj body1509::node removable?1510::bool) (instantiate::let-var (loc loc1504) (type type1505) (side-effect side-effect1506) (key key1507) (bindings bindings1508) (body body1509) (removable? removable?1510)))
(define-inline (let-var?::bool obj::obj) ((@ isa? __object) obj (@ let-var ast_node)))
(define (let-var-nil::let-var) (class-nil (@ let-var ast_node)))
(define-inline (let-var-removable?::bool o::let-var) (-> |#!bigloo_wallow| o removable?))
(define-inline (let-var-removable?-set! o::let-var v::bool) (set! (-> |#!bigloo_wallow| o removable?) v))
(define-inline (let-var-body::node o::let-var) (-> |#!bigloo_wallow| o body))
(define-inline (let-var-body-set! o::let-var v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (let-var-bindings::obj o::let-var) (-> |#!bigloo_wallow| o bindings))
(define-inline (let-var-bindings-set! o::let-var v::obj) (set! (-> |#!bigloo_wallow| o bindings) v))
(define-inline (let-var-key::obj o::let-var) (-> |#!bigloo_wallow| o key))
(define-inline (let-var-key-set! o::let-var v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (let-var-side-effect::obj o::let-var) (-> |#!bigloo_wallow| o side-effect))
(define-inline (let-var-side-effect-set! o::let-var v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (let-var-type::type o::let-var) (-> |#!bigloo_wallow| o type))
(define-inline (let-var-type-set! o::let-var v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (let-var-loc::obj o::let-var) (-> |#!bigloo_wallow| o loc))
(define-inline (let-var-loc-set! o::let-var v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; set-ex-it
(define-inline (make-set-ex-it::set-ex-it loc1499::obj type1500::type var1501::var body1502::node) (instantiate::set-ex-it (loc loc1499) (type type1500) (var var1501) (body body1502)))
(define-inline (set-ex-it?::bool obj::obj) ((@ isa? __object) obj (@ set-ex-it ast_node)))
(define (set-ex-it-nil::set-ex-it) (class-nil (@ set-ex-it ast_node)))
(define-inline (set-ex-it-body::node o::set-ex-it) (-> |#!bigloo_wallow| o body))
(define-inline (set-ex-it-body-set! o::set-ex-it v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (set-ex-it-var::var o::set-ex-it) (-> |#!bigloo_wallow| o var))
(define-inline (set-ex-it-var-set! o::set-ex-it v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (set-ex-it-type::type o::set-ex-it) (-> |#!bigloo_wallow| o type))
(define-inline (set-ex-it-type-set! o::set-ex-it v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (set-ex-it-loc::obj o::set-ex-it) (-> |#!bigloo_wallow| o loc))
(define-inline (set-ex-it-loc-set! o::set-ex-it v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; jump-ex-it
(define-inline (make-jump-ex-it::jump-ex-it loc1493::obj type1494::type exit1495::node value1496::node) (instantiate::jump-ex-it (loc loc1493) (type type1494) (exit exit1495) (value value1496)))
(define-inline (jump-ex-it?::bool obj::obj) ((@ isa? __object) obj (@ jump-ex-it ast_node)))
(define (jump-ex-it-nil::jump-ex-it) (class-nil (@ jump-ex-it ast_node)))
(define-inline (jump-ex-it-value::node o::jump-ex-it) (-> |#!bigloo_wallow| o value))
(define-inline (jump-ex-it-value-set! o::jump-ex-it v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (jump-ex-it-exit::node o::jump-ex-it) (-> |#!bigloo_wallow| o exit))
(define-inline (jump-ex-it-exit-set! o::jump-ex-it v::node) (set! (-> |#!bigloo_wallow| o exit) v))
(define-inline (jump-ex-it-type::type o::jump-ex-it) (-> |#!bigloo_wallow| o type))
(define-inline (jump-ex-it-type-set! o::jump-ex-it v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (jump-ex-it-loc::obj o::jump-ex-it) (-> |#!bigloo_wallow| o loc))
(define-inline (jump-ex-it-loc-set! o::jump-ex-it v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; retblock
(define-inline (make-retblock::retblock loc1489::obj type1490::type body1491::node) (instantiate::retblock (loc loc1489) (type type1490) (body body1491)))
(define-inline (retblock?::bool obj::obj) ((@ isa? __object) obj (@ retblock ast_node)))
(define (retblock-nil::retblock) (class-nil (@ retblock ast_node)))
(define-inline (retblock-body::node o::retblock) (-> |#!bigloo_wallow| o body))
(define-inline (retblock-body-set! o::retblock v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (retblock-type::type o::retblock) (-> |#!bigloo_wallow| o type))
(define-inline (retblock-type-set! o::retblock v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (retblock-loc::obj o::retblock) (-> |#!bigloo_wallow| o loc))
(define-inline (retblock-loc-set! o::retblock v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; return
(define-inline (make-return::return loc1484::obj type1485::type block1486::retblock value1487::node) (instantiate::return (loc loc1484) (type type1485) (block block1486) (value value1487)))
(define-inline (return?::bool obj::obj) ((@ isa? __object) obj (@ return ast_node)))
(define (return-nil::return) (class-nil (@ return ast_node)))
(define-inline (return-value::node o::return) (-> |#!bigloo_wallow| o value))
(define-inline (return-value-set! o::return v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (return-block::retblock o::return) (-> |#!bigloo_wallow| o block))
(define-inline (return-block-set! o::return v::retblock) (set! (-> |#!bigloo_wallow| o block) v))
(define-inline (return-type::type o::return) (-> |#!bigloo_wallow| o type))
(define-inline (return-type-set! o::return v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (return-loc::obj o::return) (-> |#!bigloo_wallow| o loc))
(define-inline (return-loc-set! o::return v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; make-box
(define-inline (make-make-box::make-box loc1476::obj type1477::type side-effect1478::obj key1479::obj value1480::node vtype1481::type stackable1482::bool) (instantiate::make-box (loc loc1476) (type type1477) (side-effect side-effect1478) (key key1479) (value value1480) (vtype vtype1481) (stackable stackable1482)))
(define-inline (make-box?::bool obj::obj) ((@ isa? __object) obj (@ make-box ast_node)))
(define (make-box-nil::make-box) (class-nil (@ make-box ast_node)))
(define-inline (make-box-stackable::bool o::make-box) (-> |#!bigloo_wallow| o stackable))
(define-inline (make-box-stackable-set! o::make-box v::bool) (set! (-> |#!bigloo_wallow| o stackable) v))
(define-inline (make-box-vtype::type o::make-box) (-> |#!bigloo_wallow| o vtype))
(define-inline (make-box-vtype-set! o::make-box v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (make-box-value::node o::make-box) (-> |#!bigloo_wallow| o value))
(define-inline (make-box-value-set! o::make-box v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (make-box-key::obj o::make-box) (-> |#!bigloo_wallow| o key))
(define-inline (make-box-key-set! o::make-box v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (make-box-side-effect::obj o::make-box) (-> |#!bigloo_wallow| o side-effect))
(define-inline (make-box-side-effect-set! o::make-box v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (make-box-type::type o::make-box) (-> |#!bigloo_wallow| o type))
(define-inline (make-box-type-set! o::make-box v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (make-box-loc::obj o::make-box) (-> |#!bigloo_wallow| o loc))
(define-inline (make-box-loc-set! o::make-box v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; box-ref
(define-inline (make-box-ref::box-ref loc1469::obj type1470::type side-effect1471::obj key1472::obj var1473::var vtype1474::type) (instantiate::box-ref (loc loc1469) (type type1470) (side-effect side-effect1471) (key key1472) (var var1473) (vtype vtype1474)))
(define-inline (box-ref?::bool obj::obj) ((@ isa? __object) obj (@ box-ref ast_node)))
(define (box-ref-nil::box-ref) (class-nil (@ box-ref ast_node)))
(define-inline (box-ref-vtype::type o::box-ref) (-> |#!bigloo_wallow| o vtype))
(define-inline (box-ref-vtype-set! o::box-ref v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (box-ref-var::var o::box-ref) (-> |#!bigloo_wallow| o var))
(define-inline (box-ref-var-set! o::box-ref v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (box-ref-key::obj o::box-ref) (-> |#!bigloo_wallow| o key))
(define-inline (box-ref-key-set! o::box-ref v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (box-ref-side-effect::obj o::box-ref) (-> |#!bigloo_wallow| o side-effect))
(define-inline (box-ref-side-effect-set! o::box-ref v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (box-ref-type::type o::box-ref) (-> |#!bigloo_wallow| o type))
(define-inline (box-ref-type-set! o::box-ref v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (box-ref-loc::obj o::box-ref) (-> |#!bigloo_wallow| o loc))
(define-inline (box-ref-loc-set! o::box-ref v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; box-set!
(define-inline (make-box-set!::box-set! loc1463::obj type1464::type var1465::var value1466::node vtype1467::type) (instantiate::box-set! (loc loc1463) (type type1464) (var var1465) (value value1466) (vtype vtype1467)))
(define-inline (box-set!?::bool obj::obj) ((@ isa? __object) obj (@ box-set! ast_node)))
(define (box-set!-nil::box-set!) (class-nil (@ box-set! ast_node)))
(define-inline (box-set!-vtype::type o::box-set!) (-> |#!bigloo_wallow| o vtype))
(define-inline (box-set!-vtype-set! o::box-set! v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (box-set!-value::node o::box-set!) (-> |#!bigloo_wallow| o value))
(define-inline (box-set!-value-set! o::box-set! v::node) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (box-set!-var::var o::box-set!) (-> |#!bigloo_wallow| o var))
(define-inline (box-set!-var-set! o::box-set! v::var) (set! (-> |#!bigloo_wallow| o var) v))
(define-inline (box-set!-type::type o::box-set!) (-> |#!bigloo_wallow| o type))
(define-inline (box-set!-type-set! o::box-set! v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (box-set!-loc::obj o::box-set!) (-> |#!bigloo_wallow| o loc))
(define-inline (box-set!-loc-set! o::box-set! v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sync
(define-inline (make-sync::sync loc1456::obj type1457::type mutex1458::node prelock1459::node body1460::node) (instantiate::sync (loc loc1456) (type type1457) (mutex mutex1458) (prelock prelock1459) (body body1460)))
(define-inline (sync?::bool obj::obj) ((@ isa? __object) obj (@ sync ast_node)))
(define (sync-nil::sync) (class-nil (@ sync ast_node)))
(define-inline (sync-body::node o::sync) (-> |#!bigloo_wallow| o body))
(define-inline (sync-body-set! o::sync v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (sync-prelock::node o::sync) (-> |#!bigloo_wallow| o prelock))
(define-inline (sync-prelock-set! o::sync v::node) (set! (-> |#!bigloo_wallow| o prelock) v))
(define-inline (sync-mutex::node o::sync) (-> |#!bigloo_wallow| o mutex))
(define-inline (sync-mutex-set! o::sync v::node) (set! (-> |#!bigloo_wallow| o mutex) v))
(define-inline (sync-type::type o::sync) (-> |#!bigloo_wallow| o type))
(define-inline (sync-type-set! o::sync v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sync-loc::obj o::sync) (-> |#!bigloo_wallow| o loc))
(define-inline (sync-loc-set! o::sync v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
))
